{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to watergeo","text":""},{"location":"#python-package-for-water-spatial-analysis","title":"python package for water spatial analysis","text":"<ul> <li>Free software: MIT License</li> <li>Documentation: https://github.com/Andyzxm/watergeo</li> <li>Interactive streamlit webmap https://watergeomap.streamlit.app/</li> <li>Introduction and tutorial video for watergeo https://www.youtube.com/watch?v=CGeYn2DN1HM</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<ul> <li> <p>Background for water security on (Why watergeo and water study matters?)Youtube</p> </li> <li> <p>Watergeo is a demo Python package for interactive mapping and geospatial analysis. While it contains several spatial analysis techniques, it is specifically designed for water analysis and will implement more hydrological spatial analysis functions. It also utilizes the powerful Google Earth Engine and its data catalogs to further expand Watergeo package's utilities for users. Watergeo at the moment is based on two main open source packages such as Folium and Ipyleaflet, and is taking inspiration from Leafmap and Geemap to incorporate Earth Engine into the Watergeo package.</p> </li> </ul>"},{"location":"#key-features-more-to-be-included-in-the-future","title":"Key features (more to be included in the future):","text":"<ul> <li>Interactive maps with basemap dropdown lists</li> <li>Data Visualization with vectors and rasters</li> <li>Folium adaptation for data visualization</li> <li>Google Earth Engine implementation for spatial analysis</li> <li>Split map </li> <li>Time slider</li> <li>Zonal statistics</li> <li>Choropleth</li> <li>Heatmap</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#watergeo.common.ee_export_vector","title":"<code>ee_export_vector(ee_object, filename, selectors=None, verbose=True, keep_zip=False, timeout=300, proxies=None)</code>","text":"<p>Exports Earth Engine FeatureCollection to other formats, including shp, csv, json, kml, and kmz.</p> <p>Parameters:</p> Name Type Description Default <code>ee_object</code> <code>object</code> <p>ee.FeatureCollection to export.</p> required <code>filename</code> <code>str</code> <p>Output file name.</p> required <code>selectors</code> <code>list</code> <p>A list of attributes to export. Defaults to None.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Whether to print out descriptive text.</p> <code>True</code> <code>keep_zip</code> <code>bool</code> <p>Whether to keep the downloaded shapefile as a zip file.</p> <code>False</code> <code>timeout</code> <code>int</code> <p>Timeout in seconds. Defaults to 300 seconds.</p> <code>300</code> <code>proxies</code> <code>dict</code> <p>A dictionary of proxies to use. Defaults to None.</p> <code>None</code> Source code in <code>watergeo/common.py</code> <pre><code>def ee_export_vector(\n    ee_object,\n    filename,\n    selectors=None,\n    verbose=True,\n    keep_zip=False,\n    timeout=300,\n    proxies=None,\n):\n    \"\"\"Exports Earth Engine FeatureCollection to other formats, including shp, csv, json, kml, and kmz.\n\n    Args:\n        ee_object (object): ee.FeatureCollection to export.\n        filename (str): Output file name.\n        selectors (list, optional): A list of attributes to export. Defaults to None.\n        verbose (bool, optional): Whether to print out descriptive text.\n        keep_zip (bool, optional): Whether to keep the downloaded shapefile as a zip file.\n        timeout (int, optional): Timeout in seconds. Defaults to 300 seconds.\n        proxies (dict, optional): A dictionary of proxies to use. Defaults to None.\n    \"\"\"\n\n    if not isinstance(ee_object, ee.FeatureCollection):\n        raise ValueError(\"ee_object must be an ee.FeatureCollection\")\n\n    allowed_formats = [\"csv\", \"geojson\", \"json\", \"kml\", \"kmz\", \"shp\"]\n    # allowed_formats = ['csv', 'kml', 'kmz']\n    filename = os.path.abspath(filename)\n    basename = os.path.basename(filename)\n    name = os.path.splitext(basename)[0]\n    filetype = os.path.splitext(basename)[1][1:].lower()\n\n    if filetype == \"shp\":\n        filename = filename.replace(\".shp\", \".zip\")\n\n    if not (filetype.lower() in allowed_formats):\n        raise ValueError(\n            \"The file type must be one of the following: {}\".format(\n                \", \".join(allowed_formats)\n            )\n        )\n\n    if selectors is None:\n        selectors = ee_object.first().propertyNames().getInfo()\n        if filetype == \"csv\":\n            # remove .geo coordinate field\n            ee_object = ee_object.select([\".*\"], None, False)\n\n    if filetype == \"geojson\":\n        selectors = [\".geo\"] + selectors\n\n    elif not isinstance(selectors, list):\n        raise ValueError(\n            \"selectors must be a list, such as ['attribute1', 'attribute2']\"\n        )\n    else:\n        allowed_attributes = ee_object.first().propertyNames().getInfo()\n        for attribute in selectors:\n            if not (attribute in allowed_attributes):\n                raise ValueError(\n                    \"Attributes must be one chosen from: {} \".format(\n                        \", \".join(allowed_attributes)\n                    )\n                )\n\n    try:\n        if verbose:\n            print(\"Generating URL ...\")\n        url = ee_object.getDownloadURL(\n            filetype=filetype, selectors=selectors, filename=name\n        )\n        if verbose:\n            print(f\"Downloading data from {url}\\nPlease wait ...\")\n        r = None\n        r = requests.get(url, stream=True, timeout=timeout, proxies=proxies)\n\n        if r.status_code != 200:\n            print(\"An error occurred while downloading. \\n Retrying ...\")\n            try:\n                new_ee_object = ee_object.map(filter_polygons)\n                print(\"Generating URL ...\")\n                url = new_ee_object.getDownloadURL(\n                    filetype=filetype, selectors=selectors, filename=name\n                )\n                print(f\"Downloading data from {url}\\nPlease wait ...\")\n                r = requests.get(url, stream=True, timeout=timeout, proxies=proxies)\n            except Exception as e:\n                print(e)\n                raise ValueError\n\n        with open(filename, \"wb\") as fd:\n            for chunk in r.iter_content(chunk_size=1024):\n                fd.write(chunk)\n    except Exception as e:\n        print(\"An error occurred while downloading.\")\n        if r is not None:\n            print(r.json()[\"error\"][\"message\"])\n        raise ValueError(e)\n\n    try:\n        if filetype == \"shp\":\n            with zipfile.ZipFile(filename) as z:\n                z.extractall(os.path.dirname(filename))\n            if not keep_zip:\n                os.remove(filename)\n            filename = filename.replace(\".zip\", \".shp\")\n        if verbose:\n            print(f\"Data downloaded to {filename}\")\n    except Exception as e:\n        raise ValueError(e)\n</code></pre>"},{"location":"common/#watergeo.common.filter_polygons","title":"<code>filter_polygons(ftr)</code>","text":"<p>Converts GeometryCollection to Polygon/MultiPolygon</p> <p>Parameters:</p> Name Type Description Default <code>ftr</code> <code>object</code> <p>ee.Feature</p> required <p>Returns:</p> Type Description <code>object</code> <p>ee.Feature</p> Source code in <code>watergeo/common.py</code> <pre><code>def filter_polygons(ftr):\n    \"\"\"Converts GeometryCollection to Polygon/MultiPolygon\n\n    Args:\n        ftr (object): ee.Feature\n\n    Returns:\n        object: ee.Feature\n    \"\"\"\n    # ee_initialize()\n    geometries = ftr.geometry().geometries()\n    geometries = geometries.map(\n        lambda geo: ee.Feature(ee.Geometry(geo)).set(\"geoType\", ee.Geometry(geo).type())\n    )\n\n    polygons = (\n        ee.FeatureCollection(geometries)\n        .filter(ee.Filter.eq(\"geoType\", \"Polygon\"))\n        .geometry()\n    )\n    return ee.Feature(polygons).copyProperties(ftr)\n</code></pre>"},{"location":"common/#watergeo.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>watergeo/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"common/#watergeo.common.zonal_statistics","title":"<code>zonal_statistics(in_value_raster, in_zone_vector, out_file_path=None, stat_type='MEAN', scale=None, crs=None, tile_scale=1.0, return_fc=False, verbose=True, timeout=300, proxies=None, **kwargs)</code>","text":"<p>Summarizes the values of a raster within the zones of another dataset and exports the results as a csv, shp, json, kml, or kmz.</p> <p>Parameters:</p> Name Type Description Default <code>in_value_raster</code> <code>object</code> <p>An ee.Image or ee.ImageCollection that contains the values on which to calculate a statistic.</p> required <code>in_zone_vector</code> <code>object</code> <p>An ee.FeatureCollection that defines the zones.</p> required <code>out_file_path</code> <code>str</code> <p>Output file path that will contain the summary of the values in each zone. The file type can be: csv, shp, json, kml, kmz</p> <code>None</code> <code>stat_type</code> <code>str</code> <p>Statistical type to be calculated. Defaults to 'MEAN'. For 'HIST', you can provide three parameters: max_buckets, min_bucket_width, and max_raw. For 'FIXED_HIST', you must provide three parameters: hist_min, hist_max, and hist_steps.</p> <code>'MEAN'</code> <code>scale</code> <code>float</code> <p>A nominal scale in meters of the projection to work in. Defaults to None.</p> <code>None</code> <code>crs</code> <code>str</code> <p>The projection to work in. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale. Defaults to None.</p> <code>None</code> <code>tile_scale</code> <code>float</code> <p>A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default. Defaults to 1.0.</p> <code>1.0</code> <code>verbose</code> <code>bool</code> <p>Whether to print descriptive text when the programming is running. Default to True.</p> <code>True</code> <code>return_fc</code> <code>bool</code> <p>Whether to return the results as an ee.FeatureCollection. Defaults to False.</p> <code>False</code> <code>timeout</code> <code>int</code> <p>Timeout in seconds. Default to 300.</p> <code>300</code> <code>proxies</code> <code>dict</code> <p>A dictionary of proxy servers to use for the request. Default to None.</p> <code>None</code> Source code in <code>watergeo/common.py</code> <pre><code>def zonal_stats(\n    in_value_raster,\n    in_zone_vector,\n    out_file_path=None,\n    stat_type=\"MEAN\",\n    scale=None,\n    crs=None,\n    tile_scale=1.0,\n    return_fc=False,\n    verbose=True,\n    timeout=300,\n    proxies=None,\n    **kwargs,\n):\n    \"\"\"Summarizes the values of a raster within the zones of another dataset and exports the results as a csv, shp, json, kml, or kmz.\n\n    Args:\n        in_value_raster (object): An ee.Image or ee.ImageCollection that contains the values on which to calculate a statistic.\n        in_zone_vector (object): An ee.FeatureCollection that defines the zones.\n        out_file_path (str): Output file path that will contain the summary of the values in each zone. The file type can be: csv, shp, json, kml, kmz\n        stat_type (str, optional): Statistical type to be calculated. Defaults to 'MEAN'. For 'HIST', you can provide three parameters: max_buckets, min_bucket_width, and max_raw. For 'FIXED_HIST', you must provide three parameters: hist_min, hist_max, and hist_steps.\n        scale (float, optional): A nominal scale in meters of the projection to work in. Defaults to None.\n        crs (str, optional): The projection to work in. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale. Defaults to None.\n        tile_scale (float, optional): A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default. Defaults to 1.0.\n        verbose (bool, optional): Whether to print descriptive text when the programming is running. Default to True.\n        return_fc (bool, optional): Whether to return the results as an ee.FeatureCollection. Defaults to False.\n        timeout (int, optional): Timeout in seconds. Default to 300.\n        proxies (dict, optional): A dictionary of proxy servers to use for the request. Default to None.\n    \"\"\"\n\n    if isinstance(in_value_raster, ee.ImageCollection):\n        in_value_raster = in_value_raster.toBands()\n\n    if not isinstance(in_value_raster, ee.Image):\n        print(\"The input raster must be an ee.Image.\")\n        return\n\n    if not isinstance(in_zone_vector, ee.FeatureCollection):\n        print(\"The input zone data must be an ee.FeatureCollection.\")\n        return\n\n    if out_file_path is None:\n        out_file_path = os.path.join(os.getcwd(), \"zonal_stats.csv\")\n\n    if \"statistics_type\" in kwargs:\n        stat_type = kwargs.pop(\"statistics_type\")\n\n    allowed_formats = [\"csv\", \"geojson\", \"kml\", \"kmz\", \"shp\"]\n    filename = os.path.abspath(out_file_path)\n    basename = os.path.basename(filename)\n    # name = os.path.splitext(basename)[0]\n    filetype = os.path.splitext(basename)[1][1:].lower()\n\n    if not (filetype in allowed_formats):\n        print(\n            \"The file type must be one of the following: {}\".format(\n                \", \".join(allowed_formats)\n            )\n        )\n        return\n\n    # Parameters for histogram\n    # The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.\n    max_buckets = None\n    # The minimum histogram bucket width, or null to allow any power of 2.\n    min_bucket_width = None\n    # The number of values to accumulate before building the initial histogram.\n    max_raw = None\n    hist_min = 1.0  # The lower (inclusive) bound of the first bucket.\n    hist_max = 100.0  # The upper (exclusive) bound of the last bucket.\n    hist_steps = 10  # The number of buckets to use.\n\n    if \"max_buckets\" in kwargs.keys():\n        max_buckets = kwargs[\"max_buckets\"]\n    if \"min_bucket_width\" in kwargs.keys():\n        min_bucket_width = kwargs[\"min_bucket\"]\n    if \"max_raw\" in kwargs.keys():\n        max_raw = kwargs[\"max_raw\"]\n\n    if isinstance(stat_type, str):\n        if (\n            stat_type.upper() == \"FIXED_HIST\"\n            and (\"hist_min\" in kwargs.keys())\n            and (\"hist_max\" in kwargs.keys())\n            and (\"hist_steps\" in kwargs.keys())\n        ):\n            hist_min = kwargs[\"hist_min\"]\n            hist_max = kwargs[\"hist_max\"]\n            hist_steps = kwargs[\"hist_steps\"]\n        elif stat_type.upper() == \"FIXED_HIST\":\n            print(\n                \"To use fixedHistogram, please provide these three parameters: hist_min, hist_max, and hist_steps.\"\n            )\n            return\n\n    allowed_statistics = {\n        \"COUNT\": ee.Reducer.count(),\n        \"MEAN\": ee.Reducer.mean(),\n        \"MEAN_UNWEIGHTED\": ee.Reducer.mean().unweighted(),\n        \"MAXIMUM\": ee.Reducer.max(),\n        \"MEDIAN\": ee.Reducer.median(),\n        \"MINIMUM\": ee.Reducer.min(),\n        \"MODE\": ee.Reducer.mode(),\n        \"STD\": ee.Reducer.stdDev(),\n        \"MIN_MAX\": ee.Reducer.minMax(),\n        \"SUM\": ee.Reducer.sum(),\n        \"VARIANCE\": ee.Reducer.variance(),\n        \"HIST\": ee.Reducer.histogram(\n            maxBuckets=max_buckets, minBucketWidth=min_bucket_width, maxRaw=max_raw\n        ),\n        \"FIXED_HIST\": ee.Reducer.fixedHistogram(hist_min, hist_max, hist_steps),\n        \"COMBINED_COUNT_MEAN\": ee.Reducer.count().combine(\n            ee.Reducer.mean(), sharedInputs=True\n        ),\n        \"COMBINED_COUNT_MEAN_UNWEIGHTED\": ee.Reducer.count().combine(\n            ee.Reducer.mean().unweighted(), sharedInputs=True\n        ),\n    }\n\n    if isinstance(stat_type, str):\n        if not (stat_type.upper() in allowed_statistics.keys()):\n            print(\n                \"The statistics type must be one of the following: {}\".format(\n                    \", \".join(list(allowed_statistics.keys()))\n                )\n            )\n            return\n        reducer = allowed_statistics[stat_type.upper()]\n    elif isinstance(stat_type, ee.Reducer):\n        reducer = stat_type\n    else:\n        raise ValueError(\"statistics_type must be either a string or ee.Reducer.\")\n\n    if scale is None:\n        scale = in_value_raster.projection().nominalScale().multiply(10)\n\n    try:\n        if verbose:\n            print(\"Computing statistics ...\")\n        result = in_value_raster.reduceRegions(\n            collection=in_zone_vector,\n            reducer=reducer,\n            scale=scale,\n            crs=crs,\n            tileScale=tile_scale,\n        )\n        if return_fc:\n            return result\n        else:\n            ee_export_vector(result, filename, timeout=timeout, proxies=proxies)\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"common/#watergeo.common.zonal_stats","title":"<code>zonal_stats(in_value_raster, in_zone_vector, out_file_path=None, stat_type='MEAN', scale=None, crs=None, tile_scale=1.0, return_fc=False, verbose=True, timeout=300, proxies=None, **kwargs)</code>","text":"<p>Summarizes the values of a raster within the zones of another dataset and exports the results as a csv, shp, json, kml, or kmz.</p> <p>Parameters:</p> Name Type Description Default <code>in_value_raster</code> <code>object</code> <p>An ee.Image or ee.ImageCollection that contains the values on which to calculate a statistic.</p> required <code>in_zone_vector</code> <code>object</code> <p>An ee.FeatureCollection that defines the zones.</p> required <code>out_file_path</code> <code>str</code> <p>Output file path that will contain the summary of the values in each zone. The file type can be: csv, shp, json, kml, kmz</p> <code>None</code> <code>stat_type</code> <code>str</code> <p>Statistical type to be calculated. Defaults to 'MEAN'. For 'HIST', you can provide three parameters: max_buckets, min_bucket_width, and max_raw. For 'FIXED_HIST', you must provide three parameters: hist_min, hist_max, and hist_steps.</p> <code>'MEAN'</code> <code>scale</code> <code>float</code> <p>A nominal scale in meters of the projection to work in. Defaults to None.</p> <code>None</code> <code>crs</code> <code>str</code> <p>The projection to work in. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale. Defaults to None.</p> <code>None</code> <code>tile_scale</code> <code>float</code> <p>A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default. Defaults to 1.0.</p> <code>1.0</code> <code>verbose</code> <code>bool</code> <p>Whether to print descriptive text when the programming is running. Default to True.</p> <code>True</code> <code>return_fc</code> <code>bool</code> <p>Whether to return the results as an ee.FeatureCollection. Defaults to False.</p> <code>False</code> <code>timeout</code> <code>int</code> <p>Timeout in seconds. Default to 300.</p> <code>300</code> <code>proxies</code> <code>dict</code> <p>A dictionary of proxy servers to use for the request. Default to None.</p> <code>None</code> Source code in <code>watergeo/common.py</code> <pre><code>def zonal_stats(\n    in_value_raster,\n    in_zone_vector,\n    out_file_path=None,\n    stat_type=\"MEAN\",\n    scale=None,\n    crs=None,\n    tile_scale=1.0,\n    return_fc=False,\n    verbose=True,\n    timeout=300,\n    proxies=None,\n    **kwargs,\n):\n    \"\"\"Summarizes the values of a raster within the zones of another dataset and exports the results as a csv, shp, json, kml, or kmz.\n\n    Args:\n        in_value_raster (object): An ee.Image or ee.ImageCollection that contains the values on which to calculate a statistic.\n        in_zone_vector (object): An ee.FeatureCollection that defines the zones.\n        out_file_path (str): Output file path that will contain the summary of the values in each zone. The file type can be: csv, shp, json, kml, kmz\n        stat_type (str, optional): Statistical type to be calculated. Defaults to 'MEAN'. For 'HIST', you can provide three parameters: max_buckets, min_bucket_width, and max_raw. For 'FIXED_HIST', you must provide three parameters: hist_min, hist_max, and hist_steps.\n        scale (float, optional): A nominal scale in meters of the projection to work in. Defaults to None.\n        crs (str, optional): The projection to work in. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale. Defaults to None.\n        tile_scale (float, optional): A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default. Defaults to 1.0.\n        verbose (bool, optional): Whether to print descriptive text when the programming is running. Default to True.\n        return_fc (bool, optional): Whether to return the results as an ee.FeatureCollection. Defaults to False.\n        timeout (int, optional): Timeout in seconds. Default to 300.\n        proxies (dict, optional): A dictionary of proxy servers to use for the request. Default to None.\n    \"\"\"\n\n    if isinstance(in_value_raster, ee.ImageCollection):\n        in_value_raster = in_value_raster.toBands()\n\n    if not isinstance(in_value_raster, ee.Image):\n        print(\"The input raster must be an ee.Image.\")\n        return\n\n    if not isinstance(in_zone_vector, ee.FeatureCollection):\n        print(\"The input zone data must be an ee.FeatureCollection.\")\n        return\n\n    if out_file_path is None:\n        out_file_path = os.path.join(os.getcwd(), \"zonal_stats.csv\")\n\n    if \"statistics_type\" in kwargs:\n        stat_type = kwargs.pop(\"statistics_type\")\n\n    allowed_formats = [\"csv\", \"geojson\", \"kml\", \"kmz\", \"shp\"]\n    filename = os.path.abspath(out_file_path)\n    basename = os.path.basename(filename)\n    # name = os.path.splitext(basename)[0]\n    filetype = os.path.splitext(basename)[1][1:].lower()\n\n    if not (filetype in allowed_formats):\n        print(\n            \"The file type must be one of the following: {}\".format(\n                \", \".join(allowed_formats)\n            )\n        )\n        return\n\n    # Parameters for histogram\n    # The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.\n    max_buckets = None\n    # The minimum histogram bucket width, or null to allow any power of 2.\n    min_bucket_width = None\n    # The number of values to accumulate before building the initial histogram.\n    max_raw = None\n    hist_min = 1.0  # The lower (inclusive) bound of the first bucket.\n    hist_max = 100.0  # The upper (exclusive) bound of the last bucket.\n    hist_steps = 10  # The number of buckets to use.\n\n    if \"max_buckets\" in kwargs.keys():\n        max_buckets = kwargs[\"max_buckets\"]\n    if \"min_bucket_width\" in kwargs.keys():\n        min_bucket_width = kwargs[\"min_bucket\"]\n    if \"max_raw\" in kwargs.keys():\n        max_raw = kwargs[\"max_raw\"]\n\n    if isinstance(stat_type, str):\n        if (\n            stat_type.upper() == \"FIXED_HIST\"\n            and (\"hist_min\" in kwargs.keys())\n            and (\"hist_max\" in kwargs.keys())\n            and (\"hist_steps\" in kwargs.keys())\n        ):\n            hist_min = kwargs[\"hist_min\"]\n            hist_max = kwargs[\"hist_max\"]\n            hist_steps = kwargs[\"hist_steps\"]\n        elif stat_type.upper() == \"FIXED_HIST\":\n            print(\n                \"To use fixedHistogram, please provide these three parameters: hist_min, hist_max, and hist_steps.\"\n            )\n            return\n\n    allowed_statistics = {\n        \"COUNT\": ee.Reducer.count(),\n        \"MEAN\": ee.Reducer.mean(),\n        \"MEAN_UNWEIGHTED\": ee.Reducer.mean().unweighted(),\n        \"MAXIMUM\": ee.Reducer.max(),\n        \"MEDIAN\": ee.Reducer.median(),\n        \"MINIMUM\": ee.Reducer.min(),\n        \"MODE\": ee.Reducer.mode(),\n        \"STD\": ee.Reducer.stdDev(),\n        \"MIN_MAX\": ee.Reducer.minMax(),\n        \"SUM\": ee.Reducer.sum(),\n        \"VARIANCE\": ee.Reducer.variance(),\n        \"HIST\": ee.Reducer.histogram(\n            maxBuckets=max_buckets, minBucketWidth=min_bucket_width, maxRaw=max_raw\n        ),\n        \"FIXED_HIST\": ee.Reducer.fixedHistogram(hist_min, hist_max, hist_steps),\n        \"COMBINED_COUNT_MEAN\": ee.Reducer.count().combine(\n            ee.Reducer.mean(), sharedInputs=True\n        ),\n        \"COMBINED_COUNT_MEAN_UNWEIGHTED\": ee.Reducer.count().combine(\n            ee.Reducer.mean().unweighted(), sharedInputs=True\n        ),\n    }\n\n    if isinstance(stat_type, str):\n        if not (stat_type.upper() in allowed_statistics.keys()):\n            print(\n                \"The statistics type must be one of the following: {}\".format(\n                    \", \".join(list(allowed_statistics.keys()))\n                )\n            )\n            return\n        reducer = allowed_statistics[stat_type.upper()]\n    elif isinstance(stat_type, ee.Reducer):\n        reducer = stat_type\n    else:\n        raise ValueError(\"statistics_type must be either a string or ee.Reducer.\")\n\n    if scale is None:\n        scale = in_value_raster.projection().nominalScale().multiply(10)\n\n    try:\n        if verbose:\n            print(\"Computing statistics ...\")\n        result = in_value_raster.reduceRegions(\n            collection=in_zone_vector,\n            reducer=reducer,\n            scale=scale,\n            crs=crs,\n            tileScale=tile_scale,\n        )\n        if return_fc:\n            return result\n        else:\n            ee_export_vector(result, filename, timeout=timeout, proxies=proxies)\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Xinming Andy Zhang/watergeo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>watergeo could always use more documentation, whether as part of the official watergeo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Xinming Andy Zhang/watergeo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up watergeo for local development.</p> <ol> <li> <p>Fork the watergeo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/watergeo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv watergeo\n$ cd watergeo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 watergeo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Xinming Andy Zhang/watergeo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":""},{"location":"foliumap/#watergeo.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>watergeo/foliumap.py</code> <pre><code>class Map(folium.Map):\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n        if not ee.data._initialized:\n            ee.Authenticate()\n            ee.Initialize()\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            data (str): The path to the raster file.\n            name (str, optional): The name of the layer. Defaults to \"raster\".\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_folium_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_folium_tile_layer(client, name=name, **kwargs)\n        layer.add_to(self)\n\n\n    def add_tile_layer(self, url, name, attribution=\"Custom Tile\", **kwargs):\n        \"\"\"\n        Adds a tile layer to the current map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the layer.\n            attribution (str, optional): The attribution text to be displayed for the layer. Defaults to \"Custom Tile\".\n            **kwargs: Arbitrary keyword arguments for additional layer options.\n\n        Returns:\n            None\n        \"\"\"\n        layer = folium.TileLayer(tiles=url, name=name, attr=attribution, **kwargs)\n        layer.add_to(self)\n\n    def add_basemap(self, name, overlay=True):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n            overlay (bool, optional): Whether the basemap is an overlay. Defaults to True.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"\n\n        basemaps = {\n            \"OpenTopoMap\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",\n            \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            \"Stamen Terrain\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png\",\n            \"Stamen Toner\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\",\n            \"Stamen Watercolor\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png\",\n            \"CartoDB Positron\": \"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\",\n            \"CartoDB Dark Matter\": \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\",\n            \"Esri WorldStreetMap\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\",\n            \"Esri DeLorme\": \"https://server.arcgisonline.com/ArcGIS/rest/services/Specialty/DeLorme_World_Base_Map/MapServer/tile/{z}/{y}/{x}\",\n            \"Esri WorldTopoMap\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}\",\n            \"Esri WorldImagery\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n            \"Esri NatGeoWorldMap\": \"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\",\n            \"HikeBike HikeBike\": \"https://tiles.wmflabs.org/hikebike/{z}/{x}/{y}.png\",\n            \"MtbMap\": \"http://tile.mtbmap.cz/mtbmap_tiles/{z}/{x}/{y}.png\",\n            \"CartoDB Voyager\": \"https://a.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",\n            # Add more basemaps here...\n        }\n\n        if isinstance(name, str):\n            if name in basemaps:\n                url = basemaps[name]\n                self.add_tile_layer(url, name, overlay=overlay)\n            else:\n                print(f\"Basemap '{name}' not found. Available basemaps are: {list(basemaps.keys())}\")\n        else:\n            name.add_to(self)\n\n    def to_streamlit(self, width=700, height=500):\n        \"\"\"\n        Converts the map to a streamlit component.\n\n        Args:\n            width (int, optional): The width of the map. Defaults to 700.\n            height (int, optional): The height of the map. Defaults to 500.\n\n        Returns:\n            object: The streamlit component representing the map.\n        \"\"\"\n\n        from streamlit_folium import folium_static\n\n        return folium_static(self, width=width, height=height)\n\n    def add_layer_control(self):\n        \"\"\"\n        Adds a layer control to the map.\n\n        Returns:\n            None\n        \"\"\"\n\n        folium.LayerControl().add_to(self)\n\n    def add_ee_layer(self, ee_object, vis_params, name):\n        \"\"\"\n        Adds a Earth Engine layer to the current map.\n\n        Args:\n            ee_object (object): The Earth Engine object to be displayed.\n            vis_params (dict): Visualization parameters as a dictionary.\n            name (str): The name of the layer.\n\n        Returns:\n            None\n        \"\"\"\n        ee.Initialize()\n        try:\n            # Convert the Earth Engine layer to a TileLayer that can be added to a folium map.\n            map_id_dict = ee.Image(ee_object).getMapId(vis_params)\n            folium.raster_layers.TileLayer(\n                tiles=map_id_dict['tile_fetcher'].url_format,\n                attr='Map Data &amp;copy; &lt;a href=\"https://earthengine.google.com/\"&gt;Google Earth Engine&lt;/a&gt;',\n                name=name,\n                overlay=True,\n                control=True\n            ).add_to(self)\n        except Exception as e:\n            print(f\"Could not display {name}: {e}\")\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        folium.GeoJson(data, name=name, **kwargs).add_to(self)\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n        \"\"\"\n        if isinstance(data, str):\n            data = gpd.read_file(data).to_json()\n\n        self.add_geojson(data, name, **kwargs)\n\n\n    def add_vector(self, data, name=\"vector\", **kwargs):\n        \"\"\"\n        Adds a vector layer to the current map.\n\n        Args:\n            data (str, GeoDataFrame, dict): The vector data as a string (path to file), GeoDataFrame, or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"vector\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is not in a supported format.\n\n        Returns:\n            None\n        \"\"\"\n        if isinstance(data, str):\n            if data.lower().endswith(('.geojson', '.json')):\n                # Load GeoJSON directly\n                with open(data) as f:\n                    data = json.load(f)\n                folium.GeoJson(data, name=name, **kwargs).add_to(self)\n            elif data.lower().endswith(('.shp')):\n                # Read shapefile using GeoPandas and convert to GeoJSON\n                gdf = gpd.read_file(data)\n                folium.GeoJson(gdf.__geo_interface__, name=name, **kwargs).add_to(self)\n            else:\n                raise TypeError(\"Unsupported vector data format.\")\n        elif isinstance(data, gpd.GeoDataFrame):\n            folium.GeoJson(data.__geo_interface__, name=name, **kwargs).add_to(self)\n        elif isinstance(data, dict):\n            folium.GeoJson(data, name=name, **kwargs).add_to(self)\n        else:\n            raise TypeError(\"Unsupported vector data format.\")   \n\n\n    def add_time_slider(self, ee_image_collection, vis_params, name_prefix):\n        \"\"\"\n        Adds a time slider to the map.\n\n        Args:\n            ee_image_collection (object): The Earth Engine ImageCollection to be displayed.\n            vis_params (dict): Visualization parameters as a dictionary.\n            name_prefix (str): The prefix of the name of the layers.\n\n        Returns:\n            None\n        \"\"\"\n        try:\n            # Convert the Earth Engine ImageCollection to a list of Images\n            image_list = ee_image_collection.toList(ee_image_collection.size())\n\n            # Get the number of images\n            n = image_list.size().getInfo()\n\n            for i in range(n):\n                # Get the i-th image in the list\n                image = ee.Image(image_list.get(i))\n\n                # Get the date of the image\n                date = image.date().format('YYYY-MM-dd').getInfo()\n\n                # Convert the Earth Engine layer to a TileLayer that can be added to a folium map.\n                map_id_dict = image.getMapId(vis_params)\n\n                # Add the layer to the map\n                folium.raster_layers.TileLayer(\n                    tiles=map_id_dict['tile_fetcher'].url_format,\n                    attr='Google Earth Engine',\n                    name=f\"{name_prefix} {date}\",\n                    overlay=True,\n                    control=True\n                ).add_to(self)\n        except Exception as e:\n            print(f\"Could not display {name_prefix}: {e}\")\n\n    def split_map(self, layer1, layer2, vis_params1, vis_params2, outline_layer=None):\n        \"\"\"\n        Creates a split map with the given layers and visualization parameters.\n\n        Args:\n            layer1 (object): The first Earth Engine layer to be displayed.\n            layer2 (object): The second Earth Engine layer to be displayed.\n            vis_params1 (dict): Visualization parameters for the first layer.\n            vis_params2 (dict): Visualization parameters for the second layer.\n            outline_layer (object, optional): An optional Earth Engine layer to be displayed on both sides of the split map.\n\n        Returns:\n            folium.plugins.DualMap: The split map.\n        \"\"\"\n        # Convert the layers to Earth Engine Images\n        image1 = ee.Image(layer1)\n        image2 = ee.Image(layer2)\n\n        # Get the map ID dictionaries\n        map_id_dict1 = image1.getMapId(vis_params1)\n        map_id_dict2 = image2.getMapId(vis_params2)\n\n        # Create the tile layers\n        tile_layer1 = folium.TileLayer(\n            tiles=map_id_dict1['tile_fetcher'].url_format,\n            attr='Google Earth Engine',\n            overlay=True,\n            name='layer1',\n        )\n        tile_layer2 = folium.TileLayer(\n            tiles=map_id_dict2['tile_fetcher'].url_format,\n            attr='Google Earth Engine',\n            overlay=True,\n            name='layer2',\n        )\n\n        # Create a DualMap\n        m = folium.plugins.DualMap(location=[0, 0], zoom_start=2)\n\n        # Add the layers to the map\n        m.m1.add_child(tile_layer1)\n        m.m2.add_child(tile_layer2)\n\n        # If an outline layer is provided, add it to both sides of the split map\n        if outline_layer is not None:\n            # Convert the outline layer to an Earth Engine Image\n            outline_image = ee.Image(outline_layer)\n\n            # Get the map ID dictionary\n            outline_map_id_dict = outline_image.getMapId()\n\n            # Create the outline tile layer\n            outline_tile_layer = folium.TileLayer(\n                tiles=outline_map_id_dict['tile_fetcher'].url_format,\n                attr='Google Earth Engine',\n                overlay=True,\n                name='outline',\n            )\n\n            # Add the outline layer to the map\n            m.m1.add_child(outline_tile_layer)\n            m.m2.add_child(outline_tile_layer)\n\n        # Return the split map\n        return m\n\n    def add_choropleth(self, geo_data, data, columns, key_on, fill_color='YlGn', fill_opacity=0.7, line_opacity=0.2, legend_name='Legend'):\n        \"\"\"\n        Add a choropleth layer to the map.\n\n        Parameters:\n        geo_data (str or dict): URL, file path, or data (json/dict) that represents the geojson geometries.\n        data (DataFrame): Pandas dataframe containing the data.\n        columns (list): The columns in the dataframe that contain the key and values.\n        key_on (str): Variable in the `geo_data` file that contains the key.\n        fill_color (str, optional): Area fill color. Defaults to 'YlGn'.\n        fill_opacity (float, optional): Area fill opacity. Defaults to 0.7.\n        line_opacity (float, optional): Line opacity. Defaults to 0.2.\n        legend_name (str, optional): Legend title. Defaults to 'Legend'.\n        \"\"\"\n\n        # Add the choropleth layer to the map\n        folium.Choropleth(\n            geo_data=geo_data,\n            data=data,\n            columns=columns,\n            key_on=key_on,\n            fill_color=fill_color,\n            fill_opacity=fill_opacity,\n            line_opacity=line_opacity,\n            legend_name=legend_name\n        ).add_to(self)\n\n        return self\n\n    def to_streamlit(self, width=700, height=500):\n        \"\"\"\n        Converts the map to a streamlit component.\n\n        Args:\n            width (int, optional): The width of the map. Defaults to 700.\n            height (int, optional): The height of the map. Defaults to 500.\n\n        Returns:\n            object: The streamlit component representing the map.\n        \"\"\"\n\n        from streamlit_folium import folium_static\n\n        return folium_static(self, width=width, height=height)\n\n    def add_heatmap(self, data, name=\"heatmap\", radius=25, blur=15, gradient=None, min_opacity=0, max_zoom=18):\n        \"\"\"\n        Adds a heatmap to the map.\n\n        Args:\n            data (list): List of points to generate the heatmap.\n            name (str, optional): The name of the heatmap layer. Defaults to \"heatmap\".\n            radius (int, optional): The radius of influence of each point (in pixels). Defaults to 25.\n            blur (int, optional): The intensity of the heatmap. Defaults to 15.\n            gradient (dict, optional): The color gradient config. Defaults to None.\n            min_opacity (float, optional): The minimum opacity of the heatmap. Defaults to 0.\n            max_zoom (int, optional): The maximum zoom level where the points are rendered. Defaults to 18.\n        \"\"\"\n        # Create the heatmap layer\n        heatmap = plugins.HeatMap(data, name=name, radius=radius, blur=blur, gradient=gradient, min_opacity=min_opacity, max_zoom=max_zoom)\n\n        # Add the heatmap layer to the map\n        self.add_child(heatmap)\n\n        return self\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_basemap","title":"<code>add_basemap(self, name, overlay=True)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <code>overlay</code> <code>bool</code> <p>Whether the basemap is an overlay. Defaults to True.</p> <code>True</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_basemap(self, name, overlay=True):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n        overlay (bool, optional): Whether the basemap is an overlay. Defaults to True.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"\n\n    basemaps = {\n        \"OpenTopoMap\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",\n        \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"Stamen Terrain\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png\",\n        \"Stamen Toner\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\",\n        \"Stamen Watercolor\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png\",\n        \"CartoDB Positron\": \"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\",\n        \"CartoDB Dark Matter\": \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\",\n        \"Esri WorldStreetMap\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\",\n        \"Esri DeLorme\": \"https://server.arcgisonline.com/ArcGIS/rest/services/Specialty/DeLorme_World_Base_Map/MapServer/tile/{z}/{y}/{x}\",\n        \"Esri WorldTopoMap\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}\",\n        \"Esri WorldImagery\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n        \"Esri NatGeoWorldMap\": \"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\",\n        \"HikeBike HikeBike\": \"https://tiles.wmflabs.org/hikebike/{z}/{x}/{y}.png\",\n        \"MtbMap\": \"http://tile.mtbmap.cz/mtbmap_tiles/{z}/{x}/{y}.png\",\n        \"CartoDB Voyager\": \"https://a.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",\n        # Add more basemaps here...\n    }\n\n    if isinstance(name, str):\n        if name in basemaps:\n            url = basemaps[name]\n            self.add_tile_layer(url, name, overlay=overlay)\n        else:\n            print(f\"Basemap '{name}' not found. Available basemaps are: {list(basemaps.keys())}\")\n    else:\n        name.add_to(self)\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_choropleth","title":"<code>add_choropleth(self, geo_data, data, columns, key_on, fill_color='YlGn', fill_opacity=0.7, line_opacity=0.2, legend_name='Legend')</code>","text":"<p>Add a choropleth layer to the map.</p> <p>geo_data (str or dict): URL, file path, or data (json/dict) that represents the geojson geometries. data (DataFrame): Pandas dataframe containing the data. columns (list): The columns in the dataframe that contain the key and values. key_on (str): Variable in the <code>geo_data</code> file that contains the key. fill_color (str, optional): Area fill color. Defaults to 'YlGn'. fill_opacity (float, optional): Area fill opacity. Defaults to 0.7. line_opacity (float, optional): Line opacity. Defaults to 0.2. legend_name (str, optional): Legend title. Defaults to 'Legend'.</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_choropleth(self, geo_data, data, columns, key_on, fill_color='YlGn', fill_opacity=0.7, line_opacity=0.2, legend_name='Legend'):\n    \"\"\"\n    Add a choropleth layer to the map.\n\n    Parameters:\n    geo_data (str or dict): URL, file path, or data (json/dict) that represents the geojson geometries.\n    data (DataFrame): Pandas dataframe containing the data.\n    columns (list): The columns in the dataframe that contain the key and values.\n    key_on (str): Variable in the `geo_data` file that contains the key.\n    fill_color (str, optional): Area fill color. Defaults to 'YlGn'.\n    fill_opacity (float, optional): Area fill opacity. Defaults to 0.7.\n    line_opacity (float, optional): Line opacity. Defaults to 0.2.\n    legend_name (str, optional): Legend title. Defaults to 'Legend'.\n    \"\"\"\n\n    # Add the choropleth layer to the map\n    folium.Choropleth(\n        geo_data=geo_data,\n        data=data,\n        columns=columns,\n        key_on=key_on,\n        fill_color=fill_color,\n        fill_opacity=fill_opacity,\n        line_opacity=line_opacity,\n        legend_name=legend_name\n    ).add_to(self)\n\n    return self\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_ee_layer","title":"<code>add_ee_layer(self, ee_object, vis_params, name)</code>","text":"<p>Adds a Earth Engine layer to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>ee_object</code> <code>object</code> <p>The Earth Engine object to be displayed.</p> required <code>vis_params</code> <code>dict</code> <p>Visualization parameters as a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_ee_layer(self, ee_object, vis_params, name):\n    \"\"\"\n    Adds a Earth Engine layer to the current map.\n\n    Args:\n        ee_object (object): The Earth Engine object to be displayed.\n        vis_params (dict): Visualization parameters as a dictionary.\n        name (str): The name of the layer.\n\n    Returns:\n        None\n    \"\"\"\n    ee.Initialize()\n    try:\n        # Convert the Earth Engine layer to a TileLayer that can be added to a folium map.\n        map_id_dict = ee.Image(ee_object).getMapId(vis_params)\n        folium.raster_layers.TileLayer(\n            tiles=map_id_dict['tile_fetcher'].url_format,\n            attr='Map Data &amp;copy; &lt;a href=\"https://earthengine.google.com/\"&gt;Google Earth Engine&lt;/a&gt;',\n            name=name,\n            overlay=True,\n            control=True\n        ).add_to(self)\n    except Exception as e:\n        print(f\"Could not display {name}: {e}\")\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    folium.GeoJson(data, name=name, **kwargs).add_to(self)\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_heatmap","title":"<code>add_heatmap(self, data, name='heatmap', radius=25, blur=15, gradient=None, min_opacity=0, max_zoom=18)</code>","text":"<p>Adds a heatmap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>List of points to generate the heatmap.</p> required <code>name</code> <code>str</code> <p>The name of the heatmap layer. Defaults to \"heatmap\".</p> <code>'heatmap'</code> <code>radius</code> <code>int</code> <p>The radius of influence of each point (in pixels). Defaults to 25.</p> <code>25</code> <code>blur</code> <code>int</code> <p>The intensity of the heatmap. Defaults to 15.</p> <code>15</code> <code>gradient</code> <code>dict</code> <p>The color gradient config. Defaults to None.</p> <code>None</code> <code>min_opacity</code> <code>float</code> <p>The minimum opacity of the heatmap. Defaults to 0.</p> <code>0</code> <code>max_zoom</code> <code>int</code> <p>The maximum zoom level where the points are rendered. Defaults to 18.</p> <code>18</code> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_heatmap(self, data, name=\"heatmap\", radius=25, blur=15, gradient=None, min_opacity=0, max_zoom=18):\n    \"\"\"\n    Adds a heatmap to the map.\n\n    Args:\n        data (list): List of points to generate the heatmap.\n        name (str, optional): The name of the heatmap layer. Defaults to \"heatmap\".\n        radius (int, optional): The radius of influence of each point (in pixels). Defaults to 25.\n        blur (int, optional): The intensity of the heatmap. Defaults to 15.\n        gradient (dict, optional): The color gradient config. Defaults to None.\n        min_opacity (float, optional): The minimum opacity of the heatmap. Defaults to 0.\n        max_zoom (int, optional): The maximum zoom level where the points are rendered. Defaults to 18.\n    \"\"\"\n    # Create the heatmap layer\n    heatmap = plugins.HeatMap(data, name=name, radius=radius, blur=blur, gradient=gradient, min_opacity=min_opacity, max_zoom=max_zoom)\n\n    # Add the heatmap layer to the map\n    self.add_child(heatmap)\n\n    return self\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control to the map.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Adds a layer control to the map.\n\n    Returns:\n        None\n    \"\"\"\n\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the raster file.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"raster\".</p> <code>'raster'</code> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_folium_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_folium_tile_layer(client, name=name, **kwargs)\n    layer.add_to(self)\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string, or a dictionary representing the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n    \"\"\"\n    if isinstance(data, str):\n        data = gpd.read_file(data).to_json()\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='Custom Tile', **kwargs)</code>","text":"<p>Adds a tile layer to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution text to be displayed for the layer. Defaults to \"Custom Tile\".</p> <code>'Custom Tile'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments for additional layer options.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"Custom Tile\", **kwargs):\n    \"\"\"\n    Adds a tile layer to the current map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the layer.\n        attribution (str, optional): The attribution text to be displayed for the layer. Defaults to \"Custom Tile\".\n        **kwargs: Arbitrary keyword arguments for additional layer options.\n\n    Returns:\n        None\n    \"\"\"\n    layer = folium.TileLayer(tiles=url, name=name, attr=attribution, **kwargs)\n    layer.add_to(self)\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_time_slider","title":"<code>add_time_slider(self, ee_image_collection, vis_params, name_prefix)</code>","text":"<p>Adds a time slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>ee_image_collection</code> <code>object</code> <p>The Earth Engine ImageCollection to be displayed.</p> required <code>vis_params</code> <code>dict</code> <p>Visualization parameters as a dictionary.</p> required <code>name_prefix</code> <code>str</code> <p>The prefix of the name of the layers.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_time_slider(self, ee_image_collection, vis_params, name_prefix):\n    \"\"\"\n    Adds a time slider to the map.\n\n    Args:\n        ee_image_collection (object): The Earth Engine ImageCollection to be displayed.\n        vis_params (dict): Visualization parameters as a dictionary.\n        name_prefix (str): The prefix of the name of the layers.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        # Convert the Earth Engine ImageCollection to a list of Images\n        image_list = ee_image_collection.toList(ee_image_collection.size())\n\n        # Get the number of images\n        n = image_list.size().getInfo()\n\n        for i in range(n):\n            # Get the i-th image in the list\n            image = ee.Image(image_list.get(i))\n\n            # Get the date of the image\n            date = image.date().format('YYYY-MM-dd').getInfo()\n\n            # Convert the Earth Engine layer to a TileLayer that can be added to a folium map.\n            map_id_dict = image.getMapId(vis_params)\n\n            # Add the layer to the map\n            folium.raster_layers.TileLayer(\n                tiles=map_id_dict['tile_fetcher'].url_format,\n                attr='Google Earth Engine',\n                name=f\"{name_prefix} {date}\",\n                overlay=True,\n                control=True\n            ).add_to(self)\n    except Exception as e:\n        print(f\"Could not display {name_prefix}: {e}\")\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.add_vector","title":"<code>add_vector(self, data, name='vector', **kwargs)</code>","text":"<p>Adds a vector layer to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, GeoDataFrame, dict</code> <p>The vector data as a string (path to file), GeoDataFrame, or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"vector\".</p> <code>'vector'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is not in a supported format.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def add_vector(self, data, name=\"vector\", **kwargs):\n    \"\"\"\n    Adds a vector layer to the current map.\n\n    Args:\n        data (str, GeoDataFrame, dict): The vector data as a string (path to file), GeoDataFrame, or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"vector\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is not in a supported format.\n\n    Returns:\n        None\n    \"\"\"\n    if isinstance(data, str):\n        if data.lower().endswith(('.geojson', '.json')):\n            # Load GeoJSON directly\n            with open(data) as f:\n                data = json.load(f)\n            folium.GeoJson(data, name=name, **kwargs).add_to(self)\n        elif data.lower().endswith(('.shp')):\n            # Read shapefile using GeoPandas and convert to GeoJSON\n            gdf = gpd.read_file(data)\n            folium.GeoJson(gdf.__geo_interface__, name=name, **kwargs).add_to(self)\n        else:\n            raise TypeError(\"Unsupported vector data format.\")\n    elif isinstance(data, gpd.GeoDataFrame):\n        folium.GeoJson(data.__geo_interface__, name=name, **kwargs).add_to(self)\n    elif isinstance(data, dict):\n        folium.GeoJson(data, name=name, **kwargs).add_to(self)\n    else:\n        raise TypeError(\"Unsupported vector data format.\")   \n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.split_map","title":"<code>split_map(self, layer1, layer2, vis_params1, vis_params2, outline_layer=None)</code>","text":"<p>Creates a split map with the given layers and visualization parameters.</p> <p>Parameters:</p> Name Type Description Default <code>layer1</code> <code>object</code> <p>The first Earth Engine layer to be displayed.</p> required <code>layer2</code> <code>object</code> <p>The second Earth Engine layer to be displayed.</p> required <code>vis_params1</code> <code>dict</code> <p>Visualization parameters for the first layer.</p> required <code>vis_params2</code> <code>dict</code> <p>Visualization parameters for the second layer.</p> required <code>outline_layer</code> <code>object</code> <p>An optional Earth Engine layer to be displayed on both sides of the split map.</p> <code>None</code> <p>Returns:</p> Type Description <code>folium.plugins.DualMap</code> <p>The split map.</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def split_map(self, layer1, layer2, vis_params1, vis_params2, outline_layer=None):\n    \"\"\"\n    Creates a split map with the given layers and visualization parameters.\n\n    Args:\n        layer1 (object): The first Earth Engine layer to be displayed.\n        layer2 (object): The second Earth Engine layer to be displayed.\n        vis_params1 (dict): Visualization parameters for the first layer.\n        vis_params2 (dict): Visualization parameters for the second layer.\n        outline_layer (object, optional): An optional Earth Engine layer to be displayed on both sides of the split map.\n\n    Returns:\n        folium.plugins.DualMap: The split map.\n    \"\"\"\n    # Convert the layers to Earth Engine Images\n    image1 = ee.Image(layer1)\n    image2 = ee.Image(layer2)\n\n    # Get the map ID dictionaries\n    map_id_dict1 = image1.getMapId(vis_params1)\n    map_id_dict2 = image2.getMapId(vis_params2)\n\n    # Create the tile layers\n    tile_layer1 = folium.TileLayer(\n        tiles=map_id_dict1['tile_fetcher'].url_format,\n        attr='Google Earth Engine',\n        overlay=True,\n        name='layer1',\n    )\n    tile_layer2 = folium.TileLayer(\n        tiles=map_id_dict2['tile_fetcher'].url_format,\n        attr='Google Earth Engine',\n        overlay=True,\n        name='layer2',\n    )\n\n    # Create a DualMap\n    m = folium.plugins.DualMap(location=[0, 0], zoom_start=2)\n\n    # Add the layers to the map\n    m.m1.add_child(tile_layer1)\n    m.m2.add_child(tile_layer2)\n\n    # If an outline layer is provided, add it to both sides of the split map\n    if outline_layer is not None:\n        # Convert the outline layer to an Earth Engine Image\n        outline_image = ee.Image(outline_layer)\n\n        # Get the map ID dictionary\n        outline_map_id_dict = outline_image.getMapId()\n\n        # Create the outline tile layer\n        outline_tile_layer = folium.TileLayer(\n            tiles=outline_map_id_dict['tile_fetcher'].url_format,\n            attr='Google Earth Engine',\n            overlay=True,\n            name='outline',\n        )\n\n        # Add the outline layer to the map\n        m.m1.add_child(outline_tile_layer)\n        m.m2.add_child(outline_tile_layer)\n\n    # Return the split map\n    return m\n</code></pre>"},{"location":"foliumap/#watergeo.foliumap.Map.to_streamlit","title":"<code>to_streamlit(self, width=700, height=500)</code>","text":"<p>Converts the map to a streamlit component.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>The width of the map. Defaults to 700.</p> <code>700</code> <code>height</code> <code>int</code> <p>The height of the map. Defaults to 500.</p> <code>500</code> <p>Returns:</p> Type Description <code>object</code> <p>The streamlit component representing the map.</p> Source code in <code>watergeo/foliumap.py</code> <pre><code>def to_streamlit(self, width=700, height=500):\n    \"\"\"\n    Converts the map to a streamlit component.\n\n    Args:\n        width (int, optional): The width of the map. Defaults to 700.\n        height (int, optional): The height of the map. Defaults to 500.\n\n    Returns:\n        object: The streamlit component representing the map.\n    \"\"\"\n\n    from streamlit_folium import folium_static\n\n    return folium_static(self, width=width, height=height)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install watergeo, run this command in your terminal:</p> <pre><code>pip install watergeo\n</code></pre> <p>This is the preferred method to install watergeo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install watergeo from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Xinming Andy Zhang/watergeo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use watergeo in a project:</p> <pre><code>import watergeo\n</code></pre>"},{"location":"utility/","title":"utility module","text":"<p>This is the utility module that contains utility functions for the watergeo package.</p>"},{"location":"utility/#watergeo.utility.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Converts a CSV file to a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>str</code> <p>The path to the CSV file.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The pandas DataFrame.</p> Source code in <code>watergeo/utility.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"Converts a CSV file to a pandas DataFrame.\n\n    Args:\n        csv_file (str): The path to the CSV file.\n\n    Returns:\n        pandas.DataFrame: The pandas DataFrame.\n    \"\"\"\n    import pandas as pd\n\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"watergeo/","title":"watergeo module","text":"<p>Main module.</p>"},{"location":"watergeo/#watergeo.watergeo.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>watergeo/watergeo.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"add_layer_control\" not in kwargs:\n            layer_control_flag = True\n        else:\n            layer_control_flag = kwargs[\"add_layer_control\"]\n        kwargs.pop(\"add_layer_control\", None)\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        if layer_control_flag:\n            self.add_layers_control()\n\n        self.basemap_gui_control = None\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"\n\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n        Returns:\n            None\n        \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"Adds an image overlay to the map.\n\n        Args:\n            url (str): The URL of the image.\n            bounds (list): The bounds of the image.\n            name (str, optional): The name of the layer. Defaults to \"image\".\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n        data (str): The path to the raster file or a URL.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        if data.startswith('http://') or data.startswith('https://'):\n            response = requests.get(data, stream=True)\n            if response.status_code == 200:\n                with tempfile.NamedTemporaryFile(delete=False) as fp:\n                    for chunk in response.iter_content(1024):\n                        fp.write(chunk)\n                    data = fp.name\n            else:\n                raise ValueError(f\"Failed to download {data}\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n        if data.startswith('http://') or data.startswith('https://'):\n            os.unlink(data)\n\n    def add_zoom_slider(\n        self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to be added.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n\n    def add_vector(self, data, name=\"vector\", **kwargs):\n        \"\"\"\n        Adds a vector layer to the current map.\n\n        Args:\n            data (str, GeoDataFrame, dict): The vector data as a string (path to file), GeoDataFrame, or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"vector\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is not in a supported format.\n\n        Returns:\n            None\n        \"\"\"\n        if isinstance(data, str):\n            if data.lower().endswith(('.geojson', '.json')):\n                # Load GeoJSON directly\n                with open(data) as f:\n                    data = json.load(f)\n                self.add_geojson(data, name, **kwargs)\n            elif data.lower().endswith(('.shp')):\n                # Read shapefile using GeoPandas and convert to GeoJSON\n                gdf = gpd.read_file(data)\n                self.add_geojson(gdf.__geo_interface__, name, **kwargs)\n            else:\n                raise TypeError(\"Unsupported vector data format.\")\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_geojson(data.__geo_interface__, name, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, name, **kwargs)\n        else:\n            raise TypeError(\"Unsupported vector data format.\")\n\n    def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n        def update_opacity(change):\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"\n        Adds a basemap GUI to the map. The GUI includes a dropdown list for selecting the basemap and a toggle button for showing and hiding the dropdown.\n\n        The dropdown list includes options for different basemaps, such as \"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\", and \"Esri.NatGeoWorldMap\". When a different option is selected in the dropdown, the basemap of the map is updated accordingly.\n\n        The toggle button, represented by a 'times' icon when the dropdown is visible and a 'plus' icon when the dropdown is hidden, allows the user to show and hide the dropdown list. When the button is clicked, the visibility of the dropdown list is toggled.\n\n        Args:\n            basemaps (list, optional): A list of basemaps to include in the dropdown. If not provided, a default list of basemaps is used.\n            position (str, optional): The position of the basemap GUI on the map. Defaults to \"topright\".\n        \"\"\"\n        if self.basemap_gui_control is not None:  # Check if the basemap GUI is already displayed\n            return  # If it is, do nothing and return\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n                \"USGS Hydrography\",\n            ],\n            description=\"Basemap\",\n        )\n\n        toggle_button = widgets.Button(\n            description=\"\",\n            button_style=\"primary\",\n            tooltip=\"Toggle dropdown\",\n            icon=\"times\",\n        )\n        toggle_button.layout.width = \"35px\"\n\n        def toggle_dropdown(b):\n            if basemap_selector.layout.display == \"none\":\n                basemap_selector.layout.display = \"\"\n                toggle_button.icon = \"times\"\n            else:\n                basemap_selector.layout.display = \"none\"\n                toggle_button.icon = \"plus\"\n        toggle_button.on_click(toggle_dropdown)\n\n        def update_basemap(change):\n            self.add_basemap(change[\"new\"])\n        basemap_selector.observe(update_basemap, \"value\")\n\n\n        # Create a box to hold the dropdown and the button\n        box = widgets.HBox([basemap_selector, toggle_button])\n\n        self.basemap_gui_control = WidgetControl(widget=box, position=position)\n        self.add_control(self.basemap_gui_control)\n\n\n    def add_toolbar(self, position=\"topright\"):\n        \"\"\"Adds a toolbar to the map.\n\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        # Add a new button to the toolbar for the basemap GUI\n\n        basemap_gui_button = widgets.Button(\n            description=\"\",\n            button_style=\"primary\",\n            tooltip='Toggle',  # Set tooltip to a shorter string\n            icon=\"globe\",  # Use a different icon for the basemap GUI button\n            layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n        )\n\n        basemap_gui_button.description = \"off\"\n        grid[0, 0] = basemap_gui_button  # Replace this with the desired position\n\n        toolbar_button.observe(toolbar_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)        \n\n\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n        def toolbar_callback(change):\n            with output:\n                output.clear_output()\n                if change.icon == \"folder-open\":\n                    print(f\"You can open a file\")\n                elif change.icon == \"map\":\n                    print(f\"You can add a layer\")\n                elif change.icon == \"globe\":\n                    if basemap_gui_button.description == \"off\" and self.basemap_gui_control is None:  # Check if the basemap GUI is not displayed and not already added\n                        self.add_basemap_gui()  # Call the add_basemap_gui function\n                        basemap_gui_button.description = \"on\"  # Update the state of the button\n                        print(f\"Basemap GUI added\")\n                    else:  # If the basemap GUI is displayed\n                        self.remove(self.basemap_gui_control)  # Remove the basemap GUI\n                        self.basemap_gui_control = None  # Reset the basemap GUI control\n                        basemap_gui_button.description = \"off\"  # Update the state of the button\n                        print(f\"Basemap GUI removed\")\n\n                else:\n                    with output:\n                        output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n\n    def add_ee_layer(self, ee_object, vis_params={}, name=\"Layer untitled\", shown=True, opacity=1.0):\n        \"\"\"\n        Adds Earth Engine data layers to the map.\n\n        Args:\n            ee_object (object): The Earth Engine object to add to the map.\n            vis_params (dict, optional): Visualization parameters. Defaults to {}.\n            name (str, optional): The name of the layer. Defaults to \"Layer untitled\".\n            shown (bool, optional): Whether to show the layer initially. Defaults to True.\n            opacity (float, optional): The opacity of the layer (between 0 and 1). Defaults to 1.0.\n        \"\"\"\n        try:\n            import ee  # Import ee here\n            ee.Initialize()  # Initialize Earth Engine\n            ee_object.getInfo()  # Check if the object is valid\n        except Exception as e:\n            print(\"Error adding Earth Engine layer:\", e)\n            return\n\n        if isinstance(ee_object, ee.ImageCollection):\n            ee_object = ee_object.mosaic()\n\n        # Generate a URL for fetching the tiles from Earth Engine\n        map_id_dict = ee.Image(ee_object).getMapId(vis_params)\n\n        # Create a new tile layer\n        tiles_url = map_id_dict['tile_fetcher'].url_format\n        layer = ipyleaflet.TileLayer(\n            url=tiles_url,\n            attribution='Google Earth Engine',\n            name=name,\n            opacity=opacity,\n            visible=shown\n        )\n\n        # Add the layer to the map\n        self.add_layer(layer)\n\n\n    def add_split_map(self, left_layer, right_layer, left_vis_params={}, right_vis_params={}, left_layer_name='Left Layer', right_layer_name='Right Layer'):\n        \"\"\"\n        Adds a split map with two layers and centers the map on the bounds of the layers.\n\n        Args:\n        left_layer (object): The Earth Engine object to display on the left side.\n        right_layer (object): The Earth Engine object to display on the right side.\n        left_vis_params (dict, optional): Visualization parameters for the left layer. Defaults to {}.\n        right_vis_params (dict, optional): Visualization parameters for the right layer. Defaults to {}.\n        left_layer_name (str, optional): The name of the left layer. Defaults to 'Left Layer'.\n        right_layer_name (str, optional): The name of the right layer. Defaults to 'Right Layer'.\n        \"\"\"\n        try:\n            import ee  # Import ee here\n            ee.Initialize()  # Initialize Earth Engine\n            left_layer.getInfo()  # Check if the left layer object is valid\n            right_layer.getInfo()  # Check if the right layer object is valid\n        except Exception as e:\n            print(\"Error adding Earth Engine layer:\", e)\n            return\n\n        if isinstance(left_layer, ee.ImageCollection):\n            left_layer = left_layer.mosaic()\n\n        if isinstance(right_layer, ee.ImageCollection):\n            right_layer = right_layer.mosaic()\n\n        # Generate URLs for fetching the tiles from Earth Engine\n        left_map_id_dict = ee.Image(left_layer).getMapId(left_vis_params)\n        right_map_id_dict = ee.Image(right_layer).getMapId(right_vis_params)\n\n        # Create new tile layers\n        left_tiles_url = left_map_id_dict['tile_fetcher'].url_format\n        right_tiles_url = right_map_id_dict['tile_fetcher'].url_format\n\n        left_tile_layer = ipyleaflet.TileLayer(\n            url=left_tiles_url,\n            attribution='Google Earth Engine',\n            name='Left Layer',\n            opacity=1.0,\n            visible=True\n        )\n\n        right_tile_layer = ipyleaflet.TileLayer(\n            url=right_tiles_url,\n            attribution='Google Earth Engine',\n            name='Right Layer',\n            opacity=1.0,\n            visible=True\n        )\n\n        # Add the layers to the map\n        self.add_layer(left_tile_layer)\n        self.add_layer(right_tile_layer)\n\n        # Get the bounds of the left and right layers\n        left_bounds = ee.Image(left_layer).geometry().bounds().getInfo()['coordinates']\n        right_bounds = ee.Image(right_layer).geometry().bounds().getInfo()['coordinates']\n\n        # Calculate the center of the bounds\n        left_center = [(left_bounds[0][0][0] + left_bounds[0][2][0]) / 2, (left_bounds[0][0][1] + left_bounds[0][2][1]) / 2]\n        right_center = [(right_bounds[0][0][0] + right_bounds[0][2][0]) / 2, (right_bounds[0][0][1] + right_bounds[0][2][1]) / 2]\n\n        # Calculate the average center between the two layers\n        center = [(left_center[0] + right_center[0]) / 2, (left_center[1] + right_center[1]) / 2]\n\n        # Center the map on the bounds\n        self.center = center\n\n        # Create a split control and add it to the map\n        split_control = ipyleaflet.SplitMapControl(left_layer=left_tile_layer, right_layer=right_tile_layer)\n        self.add_control(split_control) \n\n    def to_streamlit(self, width=None, height=600, scrolling=False, **kwargs):\n        \"\"\"Renders map figure in a Streamlit app.\n\n        Args:\n            width (int, optional): Width of the map. Defaults to None.\n            height (int, optional): Height of the map. Defaults to 600.\n            responsive (bool, optional): Whether to make the map responsive. Defaults to True.\n            scrolling (bool, optional): If True, show a scrollbar when the content is larger than the iframe. Otherwise, do not show a scrollbar. Defaults to False.\n\n        Returns:\n            streamlit.components: components.html object.\n        \"\"\"\n\n        try:\n            import streamlit.components.v1 as components\n\n            # if responsive:\n            #     make_map_responsive = \"\"\"\n            #     &lt;style&gt;\n            #     [title~=\"st.iframe\"] { width: 100%}\n            #     &lt;/style&gt;\n            #     \"\"\"\n            #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n            return components.html(\n                self.to_html(), width=width, height=height, scrolling=scrolling\n            )\n\n        except Exception as e:\n            raise Exception(e)\n\n\n\n    def add_time_slider(self, image_collection, vis_params):\n        # Convert the ImageCollection to a list\n        image_list = image_collection.toList(image_collection.size())\n\n        # Create a slider\n        slider = widgets.IntSlider(min=0, max=image_collection.size().getInfo() - 1, step=1, value=0)\n\n        # Define a function to update the map\n        def update_map(index):\n            # Get the selected image\n            image = ee.Image(image_list.get(index))\n\n            # Apply the visualization parameters\n            image = image.visualize(**vis_params)\n\n            # Generate a URL for the image\n            url = image.getThumbURL({'dimensions': '512x512', 'format': 'png'})\n\n            # Create an ImageOverlay\n            overlay = ipyleaflet.ImageOverlay(url=url, bounds=self.bounds)\n\n            # Clear all layers from the map\n            self.clear_layers()\n\n            # Add the new layer to the map\n            self.add_layer(overlay)\n\n        # Link the slider and the update function\n        interact(update_map, index=slider)\n\n    def add_choropleth(self, data, columns, key_on, name=\"choropleth\", **kwargs):\n        import requests\n        import json\n\n        \"\"\"Adds a choropleth layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            columns (list): The columns to use for the choropleth.\n            key_on (str): The key to use to match GeoJSON features with data.\n            name (str, optional): The name of the layer. Defaults to \"choropleth\".\n        \"\"\"\n\n        # If data is a URL, fetch the data from the URL\n        if isinstance(data, str) and data.startswith('http'):\n            response = requests.get(data)\n            data = json.loads(response.text)\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\n                \"fillColor\": \"green\",\n                \"fillOpacity\": 0.5,\n                \"color\": \"black\",\n                \"weight\": 1,\n            }\n\n        layer = ipyleaflet.Choropleth(\n            data=data, columns=columns, key_on=key_on, name=name, **kwargs\n        )\n        self.add(layer)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"\n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"add_layer_control\" not in kwargs:\n        layer_control_flag = True\n    else:\n        layer_control_flag = kwargs[\"add_layer_control\"]\n    kwargs.pop(\"add_layer_control\", None)\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    if layer_control_flag:\n        self.add_layers_control()\n\n    self.basemap_gui_control = None\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"\n\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map. The GUI includes a dropdown list for selecting the basemap and a toggle button for showing and hiding the dropdown.</p> <p>The dropdown list includes options for different basemaps, such as \"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\", and \"Esri.NatGeoWorldMap\". When a different option is selected in the dropdown, the basemap of the map is updated accordingly.</p> <p>The toggle button, represented by a 'times' icon when the dropdown is visible and a 'plus' icon when the dropdown is hidden, allows the user to show and hide the dropdown list. When the button is clicked, the visibility of the dropdown list is toggled.</p> <p>Parameters:</p> Name Type Description Default <code>basemaps</code> <code>list</code> <p>A list of basemaps to include in the dropdown. If not provided, a default list of basemaps is used.</p> <code>None</code> <code>position</code> <code>str</code> <p>The position of the basemap GUI on the map. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"\n    Adds a basemap GUI to the map. The GUI includes a dropdown list for selecting the basemap and a toggle button for showing and hiding the dropdown.\n\n    The dropdown list includes options for different basemaps, such as \"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\", and \"Esri.NatGeoWorldMap\". When a different option is selected in the dropdown, the basemap of the map is updated accordingly.\n\n    The toggle button, represented by a 'times' icon when the dropdown is visible and a 'plus' icon when the dropdown is hidden, allows the user to show and hide the dropdown list. When the button is clicked, the visibility of the dropdown list is toggled.\n\n    Args:\n        basemaps (list, optional): A list of basemaps to include in the dropdown. If not provided, a default list of basemaps is used.\n        position (str, optional): The position of the basemap GUI on the map. Defaults to \"topright\".\n    \"\"\"\n    if self.basemap_gui_control is not None:  # Check if the basemap GUI is already displayed\n        return  # If it is, do nothing and return\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n            \"USGS Hydrography\",\n        ],\n        description=\"Basemap\",\n    )\n\n    toggle_button = widgets.Button(\n        description=\"\",\n        button_style=\"primary\",\n        tooltip=\"Toggle dropdown\",\n        icon=\"times\",\n    )\n    toggle_button.layout.width = \"35px\"\n\n    def toggle_dropdown(b):\n        if basemap_selector.layout.display == \"none\":\n            basemap_selector.layout.display = \"\"\n            toggle_button.icon = \"times\"\n        else:\n            basemap_selector.layout.display = \"none\"\n            toggle_button.icon = \"plus\"\n    toggle_button.on_click(toggle_dropdown)\n\n    def update_basemap(change):\n        self.add_basemap(change[\"new\"])\n    basemap_selector.observe(update_basemap, \"value\")\n\n\n    # Create a box to hold the dropdown and the button\n    box = widgets.HBox([basemap_selector, toggle_button])\n\n    self.basemap_gui_control = WidgetControl(widget=box, position=position)\n    self.add_control(self.basemap_gui_control)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_ee_layer","title":"<code>add_ee_layer(self, ee_object, vis_params={}, name='Layer untitled', shown=True, opacity=1.0)</code>","text":"<p>Adds Earth Engine data layers to the map.</p> <p>Parameters:</p> Name Type Description Default <code>ee_object</code> <code>object</code> <p>The Earth Engine object to add to the map.</p> required <code>vis_params</code> <code>dict</code> <p>Visualization parameters. Defaults to {}.</p> <code>{}</code> <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"Layer untitled\".</p> <code>'Layer untitled'</code> <code>shown</code> <code>bool</code> <p>Whether to show the layer initially. Defaults to True.</p> <code>True</code> <code>opacity</code> <code>float</code> <p>The opacity of the layer (between 0 and 1). Defaults to 1.0.</p> <code>1.0</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_ee_layer(self, ee_object, vis_params={}, name=\"Layer untitled\", shown=True, opacity=1.0):\n    \"\"\"\n    Adds Earth Engine data layers to the map.\n\n    Args:\n        ee_object (object): The Earth Engine object to add to the map.\n        vis_params (dict, optional): Visualization parameters. Defaults to {}.\n        name (str, optional): The name of the layer. Defaults to \"Layer untitled\".\n        shown (bool, optional): Whether to show the layer initially. Defaults to True.\n        opacity (float, optional): The opacity of the layer (between 0 and 1). Defaults to 1.0.\n    \"\"\"\n    try:\n        import ee  # Import ee here\n        ee.Initialize()  # Initialize Earth Engine\n        ee_object.getInfo()  # Check if the object is valid\n    except Exception as e:\n        print(\"Error adding Earth Engine layer:\", e)\n        return\n\n    if isinstance(ee_object, ee.ImageCollection):\n        ee_object = ee_object.mosaic()\n\n    # Generate a URL for fetching the tiles from Earth Engine\n    map_id_dict = ee.Image(ee_object).getMapId(vis_params)\n\n    # Create a new tile layer\n    tiles_url = map_id_dict['tile_fetcher'].url_format\n    layer = ipyleaflet.TileLayer(\n        url=tiles_url,\n        attribution='Google Earth Engine',\n        name=name,\n        opacity=opacity,\n        visible=shown\n    )\n\n    # Add the layer to the map\n    self.add_layer(layer)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"Adds an image overlay to the map.\n\n    Args:\n        url (str): The URL of the image.\n        bounds (list): The bounds of the image.\n        name (str, optional): The name of the layer. Defaults to \"image\".\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity', position='topright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_opacity_slider(\n    self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n\n    def update_opacity(change):\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>data (str): The path to the raster file or a URL. name (str, optional): The name of the layer. Defaults to \"raster\".</p> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n    data (str): The path to the raster file or a URL.\n    name (str, optional): The name of the layer. Defaults to \"raster\".\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    if data.startswith('http://') or data.startswith('https://'):\n        response = requests.get(data, stream=True)\n        if response.status_code == 200:\n            with tempfile.NamedTemporaryFile(delete=False) as fp:\n                for chunk in response.iter_content(1024):\n                    fp.write(chunk)\n                data = fp.name\n        else:\n            raise ValueError(f\"Failed to download {data}\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    if data.startswith('http://') or data.startswith('https://'):\n        os.unlink(data)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string, or a dictionary representing the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor a dictionary representing a shapefile.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n    Returns:\n        None\n    \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_split_map","title":"<code>add_split_map(self, left_layer, right_layer, left_vis_params={}, right_vis_params={}, left_layer_name='Left Layer', right_layer_name='Right Layer')</code>","text":"<p>Adds a split map with two layers and centers the map on the bounds of the layers.</p> <p>left_layer (object): The Earth Engine object to display on the left side. right_layer (object): The Earth Engine object to display on the right side. left_vis_params (dict, optional): Visualization parameters for the left layer. Defaults to {}. right_vis_params (dict, optional): Visualization parameters for the right layer. Defaults to {}. left_layer_name (str, optional): The name of the left layer. Defaults to 'Left Layer'. right_layer_name (str, optional): The name of the right layer. Defaults to 'Right Layer'.</p> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_split_map(self, left_layer, right_layer, left_vis_params={}, right_vis_params={}, left_layer_name='Left Layer', right_layer_name='Right Layer'):\n    \"\"\"\n    Adds a split map with two layers and centers the map on the bounds of the layers.\n\n    Args:\n    left_layer (object): The Earth Engine object to display on the left side.\n    right_layer (object): The Earth Engine object to display on the right side.\n    left_vis_params (dict, optional): Visualization parameters for the left layer. Defaults to {}.\n    right_vis_params (dict, optional): Visualization parameters for the right layer. Defaults to {}.\n    left_layer_name (str, optional): The name of the left layer. Defaults to 'Left Layer'.\n    right_layer_name (str, optional): The name of the right layer. Defaults to 'Right Layer'.\n    \"\"\"\n    try:\n        import ee  # Import ee here\n        ee.Initialize()  # Initialize Earth Engine\n        left_layer.getInfo()  # Check if the left layer object is valid\n        right_layer.getInfo()  # Check if the right layer object is valid\n    except Exception as e:\n        print(\"Error adding Earth Engine layer:\", e)\n        return\n\n    if isinstance(left_layer, ee.ImageCollection):\n        left_layer = left_layer.mosaic()\n\n    if isinstance(right_layer, ee.ImageCollection):\n        right_layer = right_layer.mosaic()\n\n    # Generate URLs for fetching the tiles from Earth Engine\n    left_map_id_dict = ee.Image(left_layer).getMapId(left_vis_params)\n    right_map_id_dict = ee.Image(right_layer).getMapId(right_vis_params)\n\n    # Create new tile layers\n    left_tiles_url = left_map_id_dict['tile_fetcher'].url_format\n    right_tiles_url = right_map_id_dict['tile_fetcher'].url_format\n\n    left_tile_layer = ipyleaflet.TileLayer(\n        url=left_tiles_url,\n        attribution='Google Earth Engine',\n        name='Left Layer',\n        opacity=1.0,\n        visible=True\n    )\n\n    right_tile_layer = ipyleaflet.TileLayer(\n        url=right_tiles_url,\n        attribution='Google Earth Engine',\n        name='Right Layer',\n        opacity=1.0,\n        visible=True\n    )\n\n    # Add the layers to the map\n    self.add_layer(left_tile_layer)\n    self.add_layer(right_tile_layer)\n\n    # Get the bounds of the left and right layers\n    left_bounds = ee.Image(left_layer).geometry().bounds().getInfo()['coordinates']\n    right_bounds = ee.Image(right_layer).geometry().bounds().getInfo()['coordinates']\n\n    # Calculate the center of the bounds\n    left_center = [(left_bounds[0][0][0] + left_bounds[0][2][0]) / 2, (left_bounds[0][0][1] + left_bounds[0][2][1]) / 2]\n    right_center = [(right_bounds[0][0][0] + right_bounds[0][2][0]) / 2, (right_bounds[0][0][1] + right_bounds[0][2][1]) / 2]\n\n    # Calculate the average center between the two layers\n    center = [(left_center[0] + right_center[0]) / 2, (left_center[1] + right_center[1]) / 2]\n\n    # Center the map on the bounds\n    self.center = center\n\n    # Create a split control and add it to the map\n    split_control = ipyleaflet.SplitMapControl(left_layer=left_tile_layer, right_layer=right_tile_layer)\n    self.add_control(split_control) \n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_toolbar(self, position=\"topright\"):\n    \"\"\"Adds a toolbar to the map.\n\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    toolbar = widgets.VBox([toolbar_button])\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    # Add a new button to the toolbar for the basemap GUI\n\n    basemap_gui_button = widgets.Button(\n        description=\"\",\n        button_style=\"primary\",\n        tooltip='Toggle',  # Set tooltip to a shorter string\n        icon=\"globe\",  # Use a different icon for the basemap GUI button\n        layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n    )\n\n    basemap_gui_button.description = \"off\"\n    grid[0, 0] = basemap_gui_button  # Replace this with the desired position\n\n    toolbar_button.observe(toolbar_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)        \n\n\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n    def toolbar_callback(change):\n        with output:\n            output.clear_output()\n            if change.icon == \"folder-open\":\n                print(f\"You can open a file\")\n            elif change.icon == \"map\":\n                print(f\"You can add a layer\")\n            elif change.icon == \"globe\":\n                if basemap_gui_button.description == \"off\" and self.basemap_gui_control is None:  # Check if the basemap GUI is not displayed and not already added\n                    self.add_basemap_gui()  # Call the add_basemap_gui function\n                    basemap_gui_button.description = \"on\"  # Update the state of the button\n                    print(f\"Basemap GUI added\")\n                else:  # If the basemap GUI is displayed\n                    self.remove(self.basemap_gui_control)  # Remove the basemap GUI\n                    self.basemap_gui_control = None  # Reset the basemap GUI control\n                    basemap_gui_button.description = \"off\"  # Update the state of the button\n                    print(f\"Basemap GUI removed\")\n\n            else:\n                with output:\n                    output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_vector","title":"<code>add_vector(self, data, name='vector', **kwargs)</code>","text":"<p>Adds a vector layer to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, GeoDataFrame, dict</code> <p>The vector data as a string (path to file), GeoDataFrame, or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"vector\".</p> <code>'vector'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is not in a supported format.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_vector(self, data, name=\"vector\", **kwargs):\n    \"\"\"\n    Adds a vector layer to the current map.\n\n    Args:\n        data (str, GeoDataFrame, dict): The vector data as a string (path to file), GeoDataFrame, or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"vector\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is not in a supported format.\n\n    Returns:\n        None\n    \"\"\"\n    if isinstance(data, str):\n        if data.lower().endswith(('.geojson', '.json')):\n            # Load GeoJSON directly\n            with open(data) as f:\n                data = json.load(f)\n            self.add_geojson(data, name, **kwargs)\n        elif data.lower().endswith(('.shp')):\n            # Read shapefile using GeoPandas and convert to GeoJSON\n            gdf = gpd.read_file(data)\n            self.add_geojson(gdf.__geo_interface__, name, **kwargs)\n        else:\n            raise TypeError(\"Unsupported vector data format.\")\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_geojson(data.__geo_interface__, name, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, name, **kwargs)\n    else:\n        raise TypeError(\"Unsupported vector data format.\")\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to be added.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>watergeo/watergeo.py</code> <pre><code>def add_zoom_slider(\n    self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"watergeo/#watergeo.watergeo.Map.to_streamlit","title":"<code>to_streamlit(self, width=None, height=600, scrolling=False, **kwargs)</code>","text":"<p>Renders map figure in a Streamlit app.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the map. Defaults to None.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of the map. Defaults to 600.</p> <code>600</code> <code>responsive</code> <code>bool</code> <p>Whether to make the map responsive. Defaults to True.</p> required <code>scrolling</code> <code>bool</code> <p>If True, show a scrollbar when the content is larger than the iframe. Otherwise, do not show a scrollbar. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>streamlit.components</code> <p>components.html object.</p> Source code in <code>watergeo/watergeo.py</code> <pre><code>def to_streamlit(self, width=None, height=600, scrolling=False, **kwargs):\n    \"\"\"Renders map figure in a Streamlit app.\n\n    Args:\n        width (int, optional): Width of the map. Defaults to None.\n        height (int, optional): Height of the map. Defaults to 600.\n        responsive (bool, optional): Whether to make the map responsive. Defaults to True.\n        scrolling (bool, optional): If True, show a scrollbar when the content is larger than the iframe. Otherwise, do not show a scrollbar. Defaults to False.\n\n    Returns:\n        streamlit.components: components.html object.\n    \"\"\"\n\n    try:\n        import streamlit.components.v1 as components\n\n        # if responsive:\n        #     make_map_responsive = \"\"\"\n        #     &lt;style&gt;\n        #     [title~=\"st.iframe\"] { width: 100%}\n        #     &lt;/style&gt;\n        #     \"\"\"\n        #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n        return components.html(\n            self.to_html(), width=width, height=height, scrolling=scrolling\n        )\n\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"examples/1.Basic_features/","title":"1.Basic features","text":"In\u00a0[10]: Copied! <pre># !pip install watergeo\n</pre> # !pip install watergeo In\u00a0[11]: Copied! <pre>import watergeo.foliumap as watergeo\n</pre>  import watergeo.foliumap as watergeo In\u00a0[12]: Copied! <pre>m = watergeo.Map()\nm\n</pre> m = watergeo.Map() m Out[12]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[13]: Copied! <pre>m = watergeo.Map()\nm.add_basemap(\"OpenTopoMap\")\nm\n</pre> m = watergeo.Map() m.add_basemap(\"OpenTopoMap\") m Out[13]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[14]: Copied! <pre>m = watergeo.Map()\nm.add_tile_layer(\n    url=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\",\n    name=\"Google Satellite\",\n    attribution=\"Google\",\n)\nm\n</pre> m = watergeo.Map() m.add_tile_layer(     url=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\",     name=\"Google Satellite\",     attribution=\"Google\", ) m Out[14]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[15]: Copied! <pre>m=watergeo.Map()\nm.add_raster('https://github.com/opengeos/datasets/releases/download/raster/dem.tif')\nm\n</pre> m=watergeo.Map() m.add_raster('https://github.com/opengeos/datasets/releases/download/raster/dem.tif') m Out[15]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[16]: Copied! <pre>m=watergeo.Map()\nsurface_water = watergeo.ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\")\n\nm.add_ee_layer(surface_water, {\n    'bands': ['occurrence'],\n    'palette': ['white', 'blue']\n}, 'surface water')\nm\n</pre> m=watergeo.Map() surface_water = watergeo.ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\")  m.add_ee_layer(surface_water, {     'bands': ['occurrence'],     'palette': ['white', 'blue'] }, 'surface water') m Out[16]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[17]: Copied! <pre>import ee\nimport watergeo.foliumap as watergeo\n\n# Initialize the Earth Engine library.\nee.Initialize()\ncollection1 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR').filterDate('2018-01-01', '2018-12-31')  # Landsat 8 for 2018\ncollection2 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR').filterDate('2016-01-01', '2016-12-31')  # Landsat 8 for 2010\n\n# Define the Earth Engine layers.\nlayer1 = collection1.median()\nlayer2 = collection2.median()\n\n# Define the visualization parameters.\nvis_params1 = {\n    'bands': ['B4', 'B3', 'B2'],  # RGB\n    'min': 0,\n    'max': 3000,\n    'gamma': 1.4\n}\nvis_params2 = {\n    'bands': ['B4', 'B3', 'B2'],  # RGB\n    'min': 0,\n    'max': 3000,\n    'gamma': 1.4\n}\n\n# Create a map.\nm = watergeo.Map()\n\n# Create a split map.\nsplit_m = m.split_map(layer1, layer2, vis_params1, vis_params2)\n\n# Display the split map.\nsplit_m\n</pre> import ee import watergeo.foliumap as watergeo  # Initialize the Earth Engine library. ee.Initialize() collection1 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR').filterDate('2018-01-01', '2018-12-31')  # Landsat 8 for 2018 collection2 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR').filterDate('2016-01-01', '2016-12-31')  # Landsat 8 for 2010  # Define the Earth Engine layers. layer1 = collection1.median() layer2 = collection2.median()  # Define the visualization parameters. vis_params1 = {     'bands': ['B4', 'B3', 'B2'],  # RGB     'min': 0,     'max': 3000,     'gamma': 1.4 } vis_params2 = {     'bands': ['B4', 'B3', 'B2'],  # RGB     'min': 0,     'max': 3000,     'gamma': 1.4 }  # Create a map. m = watergeo.Map()  # Create a split map. split_m = m.split_map(layer1, layer2, vis_params1, vis_params2)  # Display the split map. split_m Out[17]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/1.Basic_features/#basic-watergeo-features","title":"Basic watergeo Features\u00b6","text":"<p>You can try out watergeo main features using the google collab without having to install anything on your computer: </p>"},{"location":"examples/1.Basic_features/#install-watergeo","title":"Install watergeo\u00b6","text":""},{"location":"examples/1.Basic_features/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/1.Basic_features/#change-basemaps","title":"Change basemaps\u00b6","text":""},{"location":"examples/1.Basic_features/#add-xyz-tile-layer","title":"Add XYZ tile layer\u00b6","text":""},{"location":"examples/1.Basic_features/#add-raster-from-url","title":"Add Raster from URL\u00b6","text":""},{"location":"examples/1.Basic_features/#google-earth-engine","title":"Google Earth Engine\u00b6","text":""},{"location":"examples/1.Basic_features/#split-map","title":"Split map\u00b6","text":""},{"location":"examples/10.heatmap/","title":"10.heatmap","text":"In\u00a0[1]: Copied! <pre>import watergeo.foliumap as watergeo\nimport requests\n# Fetch earthquake data\nresponse = requests.get(\"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojson\")\ndata = response.json()\n\n# Extract latitude, longitude, and magnitude from data\nheatmap_data = [[float(earthquake['geometry']['coordinates'][1]), float(earthquake['geometry']['coordinates'][0]), float(earthquake['properties']['mag'])] for earthquake in data['features']]\n\n# Create a map\nmymap = watergeo.Map()\n\n# Add a heatmap to the map\nmymap.add_heatmap(heatmap_data)\n\n# Display the map\nmymap\n</pre> import watergeo.foliumap as watergeo import requests # Fetch earthquake data response = requests.get(\"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojson\") data = response.json()  # Extract latitude, longitude, and magnitude from data heatmap_data = [[float(earthquake['geometry']['coordinates'][1]), float(earthquake['geometry']['coordinates'][0]), float(earthquake['properties']['mag'])] for earthquake in data['features']]  # Create a map mymap = watergeo.Map()  # Add a heatmap to the map mymap.add_heatmap(heatmap_data)  # Display the map mymap Out[1]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/2.folium/","title":"2.folium","text":"In\u00a0[4]: Copied! <pre>import watergeo.foliumap as watergeo\nwatergeo.ee.Authenticate()\nwatergeo.ee.Initialize()\n</pre> import watergeo.foliumap as watergeo watergeo.ee.Authenticate() watergeo.ee.Initialize() In\u00a0[5]: Copied! <pre>m=watergeo.Map()\nm.add_basemap(\"OpenTopoMap\")\nm\n</pre> m=watergeo.Map() m.add_basemap(\"OpenTopoMap\") m Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/3.raster/","title":"3.raster","text":"In\u00a0[1]: Copied! <pre>import watergeo.foliumap as watergeo\n</pre> import watergeo.foliumap as watergeo In\u00a0[2]: Copied! <pre>m= watergeo.Map()\nm.add_raster('datasets/landsat.tif')\nm\n</pre> m= watergeo.Map() m.add_raster('datasets/landsat.tif') m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>m2=watergeo.Map()\nm2.add_raster('https://github.com/opengeos/datasets/releases/download/raster/dem.tif')\nm2\n</pre> m2=watergeo.Map() m2.add_raster('https://github.com/opengeos/datasets/releases/download/raster/dem.tif') m2  Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/3.raster/#add-raster-and-image-to-the-map","title":"Add Raster and image to the Map\u00b6","text":"<ul> <li>In this example we will apply add_raster and add_image functions to demostrate the extensive utilities of this pacakge</li> <li>Add raster using local dataset</li> <li>Add raster using URL</li> </ul>"},{"location":"examples/4.Google_Earth_Engine/","title":"4.Google Earth Engine","text":"In\u00a0[1]: Copied! <pre>import watergeo.foliumap as watergeo\n</pre> import watergeo.foliumap as watergeo In\u00a0[2]: Copied! <pre>watergeo.ee.Authenticate() \nwatergeo.ee.Initialize()\n</pre> watergeo.ee.Authenticate()  watergeo.ee.Initialize() In\u00a0[3]: Copied! <pre>Map = watergeo.Map()\n# Load surface water data (e.g., JRC Global Surface Water dataset)\nsurface_water = watergeo.ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\")\nvis_params = {\n    'bands': ['occurrence'],\n    'palette': ['white', 'blue']\n}\nMap.add_ee_layer(surface_water, vis_params, \"Surface Water\")\nMap\n</pre> Map = watergeo.Map() # Load surface water data (e.g., JRC Global Surface Water dataset) surface_water = watergeo.ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\") vis_params = {     'bands': ['occurrence'],     'palette': ['white', 'blue'] } Map.add_ee_layer(surface_water, vis_params, \"Surface Water\") Map Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>appacounties = watergeo.ee.FeatureCollection('projects/ee-ut-andyzhang/assets/appawateruse')\n</pre> appacounties = watergeo.ee.FeatureCollection('projects/ee-ut-andyzhang/assets/appawateruse') In\u00a0[5]: Copied! <pre># Style the Appalachia counties with a border\nstyled_appacounties = appacounties.style(\n    color='red',  # Border color\n    fillColor='00000000',  # Transparent fill color\n    width=1  # Border width\n)\n\n# Add the styled Appalachia counties to the map\nMap.add_ee_layer(styled_appacounties, {}, 'Appalachia Counties')\nMap\n</pre>  # Style the Appalachia counties with a border styled_appacounties = appacounties.style(     color='red',  # Border color     fillColor='00000000',  # Transparent fill color     width=1  # Border width )  # Add the styled Appalachia counties to the map Map.add_ee_layer(styled_appacounties, {}, 'Appalachia Counties') Map Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/4.Google_Earth_Engine/#utilzie-the-powerful-earth-engine-datasets","title":"Utilzie the Powerful Earth Engine datasets\u00b6","text":""},{"location":"examples/4.Google_Earth_Engine/#upload-your-own-shapefiles-into-earth-engine","title":"Upload your own shapefiles into Earth Engine\u00b6","text":""},{"location":"examples/5.Splitmap/","title":"5.Splitmap","text":"In\u00a0[1]: Copied! <pre>import ee\nimport watergeo.foliumap as watergeo\n\n# Initialize the Earth Engine library.\nee.Initialize()\n\n# Define the Earth Engine layers.\nlayer1 = ee.Image('USGS/SRTMGL1_003')\nlayer2 = ee.Image('CGIAR/SRTM90_V4')\n\n# Define the visualization parameters.\nvis_params1 = {\n    'min': 0,\n    'max': 3000,\n    'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']\n}\nvis_params2 = {\n    'min': 0,\n    'max': 6000,\n    'palette': ['0000CC', 'CCFFFF', 'FFFFCC', 'CC0000']\n}\n\n# Create a map.\nm = watergeo.Map()\n\n# Create a split map.\nsplit_m = m.split_map(layer1, layer2, vis_params1, vis_params2)\n\n# Display the split map.\nsplit_m\n</pre> import ee import watergeo.foliumap as watergeo  # Initialize the Earth Engine library. ee.Initialize()  # Define the Earth Engine layers. layer1 = ee.Image('USGS/SRTMGL1_003') layer2 = ee.Image('CGIAR/SRTM90_V4')  # Define the visualization parameters. vis_params1 = {     'min': 0,     'max': 3000,     'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5'] } vis_params2 = {     'min': 0,     'max': 6000,     'palette': ['0000CC', 'CCFFFF', 'FFFFCC', 'CC0000'] }  # Create a map. m = watergeo.Map()  # Create a split map. split_m = m.split_map(layer1, layer2, vis_params1, vis_params2)  # Display the split map. split_m Out[1]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[2]: Copied! <pre>surface_water = watergeo.ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\")\nappacounties = watergeo.ee.FeatureCollection('projects/ee-ut-andyzhang/assets/appawateruse')\nclipped_surface_water = surface_water.clipToCollection(appacounties)\n\n# Set thresholds for 'occurrence'\nthreshold_80 = 80\nthreshold_20 = 20\n\nvis_params_80 = {\n    'bands': ['occurrence'],\n    'palette': ['white', 'blue']\n}\nvis_params_20 = {\n    'bands': ['occurrence'],\n    'palette': ['white', 'blue']\n}\n\n# Consider only those pixels as reliable water sources which have an 'occurrence' greater than the thresholds\nreliable_water_80 = clipped_surface_water.gte(threshold_80).selfMask()\nreliable_water_20 = clipped_surface_water.gte(threshold_20).selfMask()\n\n# Add the reliable water sources to the map as split layers\nMap=watergeo.Map()\nsplit_m = Map.split_map(reliable_water_80, reliable_water_20, vis_params_80, vis_params_20)\n\n# Display the split map.\nsplit_m\n</pre> surface_water = watergeo.ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\") appacounties = watergeo.ee.FeatureCollection('projects/ee-ut-andyzhang/assets/appawateruse') clipped_surface_water = surface_water.clipToCollection(appacounties)  # Set thresholds for 'occurrence' threshold_80 = 80 threshold_20 = 20  vis_params_80 = {     'bands': ['occurrence'],     'palette': ['white', 'blue'] } vis_params_20 = {     'bands': ['occurrence'],     'palette': ['white', 'blue'] }  # Consider only those pixels as reliable water sources which have an 'occurrence' greater than the thresholds reliable_water_80 = clipped_surface_water.gte(threshold_80).selfMask() reliable_water_20 = clipped_surface_water.gte(threshold_20).selfMask()  # Add the reliable water sources to the map as split layers Map=watergeo.Map() split_m = Map.split_map(reliable_water_80, reliable_water_20, vis_params_80, vis_params_20)  # Display the split map. split_m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/6.Toolbars/","title":"6.Toolbars","text":"In\u00a0[1]: Copied! <pre>import watergeo\n</pre> import watergeo In\u00a0[2]: Copied! <pre>m= watergeo.Map()\nm.add_toolbar()\nm\n</pre> m= watergeo.Map() m.add_toolbar() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/6.Toolbars/#adding-dropdown-list-for-basemap-selections","title":"Adding Dropdown list for basemap selections\u00b6","text":"<ul> <li>Use add_toolar function to access basemap selections</li> <li>Click on globe icon to access basemap gui function that provide serveal basemap chocies</li> <li>Click on the selected basemap to visualize basemap selection  (The current available basemaps are  \"OpenStreetMap,\" \"OpenTopoMap,\" \"Esri.WorldImagery,\" and \"CartoDB.DarkMatter.\")</li> <li>When you are done with basemap selection, you can click on the x button to hide the dropdown list or click on the globe icon to toggle off the selected basemap</li> </ul>"},{"location":"examples/7.zonal_stat/","title":"7.zonal stat","text":"In\u00a0[1]: Copied! <pre>import watergeo\nimport watergeo.common\nimport ee\n</pre> import watergeo import watergeo.common import ee In\u00a0[2]: Copied! <pre>ee.Initialize()\n\nappacounties = ee.FeatureCollection('projects/ee-ut-andyzhang/assets/appawateruse')\n</pre> ee.Initialize()  appacounties = ee.FeatureCollection('projects/ee-ut-andyzhang/assets/appawateruse') In\u00a0[3]: Copied! <pre>surface_water = watergeo.ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\")\nclipped_surface_water = surface_water.clipToCollection(appacounties)\nthreshold_20 = 20\nreliable_water_20 = clipped_surface_water.gte(threshold_20).selfMask()\n</pre> surface_water = watergeo.ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\") clipped_surface_water = surface_water.clipToCollection(appacounties) threshold_20 = 20 reliable_water_20 = clipped_surface_water.gte(threshold_20).selfMask()  In\u00a0[4]: Copied! <pre>output = watergeo.common.zonal_stats(reliable_water_20, appacounties, stat_type='MEAN', scale=30, return_fc=True)\noutput_file = 'water_surface_GT_80.csv'\n\n# watergeo.ee_export_vector(output, filename=output_file)\n</pre> output = watergeo.common.zonal_stats(reliable_water_20, appacounties, stat_type='MEAN', scale=30, return_fc=True) output_file = 'water_surface_GT_80.csv'  # watergeo.ee_export_vector(output, filename=output_file) <pre>Computing statistics ...\n</pre>"},{"location":"examples/8.timeslider/","title":"8.timeslider","text":"In\u00a0[1]: Copied! <pre>import ee\nimport watergeo.foliumap as watergeo\n\n# Initialize the Earth Engine module\nee.Initialize()\n\n# Define an ee.ImageCollection\nimage_collection = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA') \\\n    .filterDate('2014-12-01', '2014-12-31')  # Filter by date range\n\n# Select only the first 5 images\nimage_collection = image_collection.limit(10)\n\n# Define visualization parameters\nvis_params = {\n    'min': 0,\n    'max': 0.5,\n    'bands': ['B4', 'B3', 'B2'],\n}\n\n# Create a folium map\nm = watergeo.Map()\n\n# Add the Earth Engine layer to the map\nm.add_time_slider(image_collection, vis_params, 'Landsat 8')\n\n# Display the map\nm\n</pre> import ee import watergeo.foliumap as watergeo  # Initialize the Earth Engine module ee.Initialize()  # Define an ee.ImageCollection image_collection = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA') \\     .filterDate('2014-12-01', '2014-12-31')  # Filter by date range  # Select only the first 5 images image_collection = image_collection.limit(10)  # Define visualization parameters vis_params = {     'min': 0,     'max': 0.5,     'bands': ['B4', 'B3', 'B2'], }  # Create a folium map m = watergeo.Map()  # Add the Earth Engine layer to the map m.add_time_slider(image_collection, vis_params, 'Landsat 8')  # Display the map m Out[1]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[2]: Copied! <pre># Import necessary libraries\nimport ee\nimport watergeo\n\n# Initialize the Earth Engine library\nee.Initialize()\n\n# Define your ImageCollection, region, and scale\n# Define your ImageCollection, region, and scale\nimage_collection = ee.ImageCollection('COPERNICUS/S2').filterDate('2020-01-01', '2020-01-31')\nimage_collection = image_collection.limit(10)\nvis_params = {\n    'min': 0,\n    'max': 3000,\n    'bands': ['B4', 'B3', 'B2']\n}\n# Create the time series slider\nm = watergeo.Map()\n\n# Add the Earth Engine layer to the map with a time slider\nm.add_time_slider(image_collection, vis_params)\n\n# Display the map\nm\n</pre> # Import necessary libraries import ee import watergeo  # Initialize the Earth Engine library ee.Initialize()  # Define your ImageCollection, region, and scale # Define your ImageCollection, region, and scale image_collection = ee.ImageCollection('COPERNICUS/S2').filterDate('2020-01-01', '2020-01-31') image_collection = image_collection.limit(10) vis_params = {     'min': 0,     'max': 3000,     'bands': ['B4', 'B3', 'B2'] } # Create the time series slider m = watergeo.Map()  # Add the Earth Engine layer to the map with a time slider m.add_time_slider(image_collection, vis_params)  # Display the map m <pre>interactive(children=(IntSlider(value=0, description='index', max=9), Output()), _dom_classes=('widget-interac\u2026</pre> <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/9.choropleth/","title":"9.choropleth","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nimport watergeo.foliumap as watergeo\n\n# Create a pandas DataFrame with unemployment data\nincome = pd.DataFrame({\n    'State': ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'],\n    'Income': [43296, 73181, 51492, 42336, 67169, 65458, 74168, 63436, 50883, 52977, 74511, 52225, 62992, 52182, 58570, 56422, 48375, 45727, 55425, 78916, 77385, 54909, 68388, 43529, 53560, 50801, 59116, 57598, 73381, 79363, 46718, 64894, 52413, 61285, 54021, 50051, 60212, 59445, 61043, 50570, 54126, 48708, 59570, 68358, 57808, 68766, 70116, 44921, 59305, 60938]  # Hypothetical income data for all states\n})\n\n# Create an instance of the FoliumMap class from the watergeo package\nfmap = watergeo.Map()\n\n# Add a choropleth layer to the map\nfmap.add_choropleth(\n    geo_data='https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json',\n    data=income,\n    columns=['State', 'Income'],\n    key_on='feature.properties.name',\n    fill_color='BuGn',  # You can change the color scheme\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Income (in US dollars)'\n        )\n\n# Display the map\nfmap\n</pre> import pandas as pd import watergeo.foliumap as watergeo  # Create a pandas DataFrame with unemployment data income = pd.DataFrame({     'State': ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'],     'Income': [43296, 73181, 51492, 42336, 67169, 65458, 74168, 63436, 50883, 52977, 74511, 52225, 62992, 52182, 58570, 56422, 48375, 45727, 55425, 78916, 77385, 54909, 68388, 43529, 53560, 50801, 59116, 57598, 73381, 79363, 46718, 64894, 52413, 61285, 54021, 50051, 60212, 59445, 61043, 50570, 54126, 48708, 59570, 68358, 57808, 68766, 70116, 44921, 59305, 60938]  # Hypothetical income data for all states })  # Create an instance of the FoliumMap class from the watergeo package fmap = watergeo.Map()  # Add a choropleth layer to the map fmap.add_choropleth(     geo_data='https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json',     data=income,     columns=['State', 'Income'],     key_on='feature.properties.name',     fill_color='BuGn',  # You can change the color scheme     fill_opacity=0.7,     line_opacity=0.2,     legend_name='Income (in US dollars)'         )  # Display the map fmap Out[1]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>import watergeo\n</pre> import watergeo In\u00a0[2]: Copied! <pre>from watergeo import utility\n</pre> from watergeo import utility In\u00a0[4]: Copied! <pre>csv = \"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\"\ndf = utility.csv_to_df(csv)\ndf\n</pre> csv = \"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\" df = utility.csv_to_df(csv) df Out[4]: id name 0 AL Alabama 1 AK Alaska 2 AZ Arizona 3 AR Arkansas 4 CA California 5 CO Colorado 6 CT Connecticut 7 DE Delaware 8 FL Florida 9 GA Georgia 10 HI Hawaii 11 ID Idaho 12 IL Illinois 13 IN Indiana 14 IA Iowa 15 KS Kansas 16 KY Kentucky 17 LA Louisiana 18 ME Maine 19 MD Maryland 20 MA Massachusetts 21 MI Michigan 22 MN Minnesota 23 MS Mississippi 24 MO Missouri 25 MT Montana 26 NE Nebraska 27 NV Nevada 28 NH New Hampshire 29 NJ New Jersey 30 NM New Mexico 31 NY New York 32 NC North Carolina 33 ND North Dakota 34 OH Ohio 35 OK Oklahoma 36 OR Oregon 37 PA Pennsylvania 38 RI Rhode Island 39 SC South Carolina 40 SD South Dakota 41 TN Tennessee 42 TX Texas 43 UT Utah 44 VT Vermont 45 VA Virginia 46 WA Washington 47 WV West Virginia 48 WI Wisconsin 49 WY Wyoming 50 DC District of Columbia"},{"location":"examples/physical_water_surface/","title":"Physical water surface","text":"<p>Things to know before you start:</p> In\u00a0[1]: Copied! <pre>import watergeo\nimport ee\n</pre> import watergeo import ee In\u00a0[2]: Copied! <pre>ee.Authenticate() \nee.Initialize()\n</pre> ee.Authenticate()  ee.Initialize() In\u00a0[3]: Copied! <pre># Initialize ee\nMap = watergeo.Map()\n\n# Define the study area (entire US)\nstudy_area = ee.Geometry.Rectangle([-125, 25, -65, 50])\n\n# Load surface water data (e.g., JRC Global Surface Water dataset)\nsurface_water = ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\")\n\n# Create a visualization parameter for surface water (blue color)\nvis_params = {\n    'bands': ['occurrence'],\n    'palette': ['white', 'blue']\n}\n\n# Add surface water data to the map\nMap.add_ee_layer(surface_water, vis_params, 'Surface Water')\n\n# Display the map\nMap\n</pre>  # Initialize ee Map = watergeo.Map()  # Define the study area (entire US) study_area = ee.Geometry.Rectangle([-125, 25, -65, 50])  # Load surface water data (e.g., JRC Global Surface Water dataset) surface_water = ee.Image(\"JRC/GSW1_2/GlobalSurfaceWater\")  # Create a visualization parameter for surface water (blue color) vis_params = {     'bands': ['occurrence'],     'palette': ['white', 'blue'] }  # Add surface water data to the map Map.add_ee_layer(surface_water, vis_params, 'Surface Water')  # Display the map Map  <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[7]: Copied! <pre>import ee\nimport watergeo\n\n# Initialize the Earth Engine object\nee.Initialize()\n\n# Load the image collection\ngfd = ee.ImageCollection('GLOBAL_FLOOD_DB/MODIS_EVENTS/V1')\n\n# Filter the collection to get a specific flood event\nhurricaneIsaacDartmouthId = 3977\nhurricaneIsaacUsa = ee.Image(gfd.filterMetadata('id', 'equals', hurricaneIsaacDartmouthId).first())\n\n# Create a map\nm = watergeo.Map()\n\n# Set map options\n\n# Add layers to the map\nm.add_ee_layer(hurricaneIsaacUsa.select('flooded').selfMask(), {'min': 0, 'max': 1, 'palette': '001133'}, 'Hurricane Isaac - Inundation Extent')\nm.add_ee_layer(hurricaneIsaacUsa.select('duration').selfMask(), {'min': 0, 'max': 4, 'palette': ['c3effe', '1341e8', '051cb0', '001133']}, 'Hurricane Isaac - Duration')\nm.add_ee_layer(gfd.select('flooded').sum().selfMask(), {'min': 0, 'max': 10, 'palette': ['c3effe', '1341e8', '051cb0', '001133']}, 'GFD Satellite Observed Flood Plain')\nm.add_ee_layer(gfd.select('jrc_perm_water').sum().gte(1).selfMask(), {'min': 0, 'max': 1, 'palette': 'C3EFFE'}, 'JRC Permanent Water')\n\n# Display the map\nm\n</pre> import ee import watergeo  # Initialize the Earth Engine object ee.Initialize()  # Load the image collection gfd = ee.ImageCollection('GLOBAL_FLOOD_DB/MODIS_EVENTS/V1')  # Filter the collection to get a specific flood event hurricaneIsaacDartmouthId = 3977 hurricaneIsaacUsa = ee.Image(gfd.filterMetadata('id', 'equals', hurricaneIsaacDartmouthId).first())  # Create a map m = watergeo.Map()  # Set map options  # Add layers to the map m.add_ee_layer(hurricaneIsaacUsa.select('flooded').selfMask(), {'min': 0, 'max': 1, 'palette': '001133'}, 'Hurricane Isaac - Inundation Extent') m.add_ee_layer(hurricaneIsaacUsa.select('duration').selfMask(), {'min': 0, 'max': 4, 'palette': ['c3effe', '1341e8', '051cb0', '001133']}, 'Hurricane Isaac - Duration') m.add_ee_layer(gfd.select('flooded').sum().selfMask(), {'min': 0, 'max': 10, 'palette': ['c3effe', '1341e8', '051cb0', '001133']}, 'GFD Satellite Observed Flood Plain') m.add_ee_layer(gfd.select('jrc_perm_water').sum().gte(1).selfMask(), {'min': 0, 'max': 1, 'palette': 'C3EFFE'}, 'JRC Permanent Water')  # Display the map m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/physical_water_surface/","title":"\u00b6","text":"<p>You will need to authenticate your own google earth engine token before start</p>"},{"location":"examples/physical_water_surface/","title":"\u00b6","text":"<p>This added ee function within Map function will utilize the google earth engine to visulize dataset</p>"},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[1]: Copied! <pre>import os\nimport json\nimport random\nimport requests\nimport watergeo\nimport geopandas as gpd\n</pre> import os import json import random import requests import watergeo import geopandas as gpd In\u00a0[6]: Copied! <pre>from ipyleaflet import Map, GeoJSON\n\nif not os.path.exists(\"europe_110.geo.json\"):\n    url = \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\"\n    r = requests.get(url)\n    with open(\"europe_110.geo.json\", \"w\") as f:\n        f.write(r.content.decode(\"utf-8\"))\n\nwith open(\"europe_110.geo.json\", \"r\") as f:\n    data = json.load(f)\n\n\ndef random_color(feature):\n    return {\n        \"color\": \"black\",\n        \"fillColor\": random.choice([\"red\", \"yellow\", \"green\", \"orange\"]),\n    }\n\n\nm = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)\n\ngeo_json = GeoJSON(\n    data=data,\n    style={\"opacity\": 1, \"dashArray\": \"9\", \"fillOpacity\": 0.1, \"weight\": 1},\n    hover_style={\"color\": \"white\", \"dashArray\": \"0\", \"fillOpacity\": 0.5},\n    style_callback=random_color,\n)\nm.add(geo_json)\n\nm\n</pre> from ipyleaflet import Map, GeoJSON  if not os.path.exists(\"europe_110.geo.json\"):     url = \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\"     r = requests.get(url)     with open(\"europe_110.geo.json\", \"w\") as f:         f.write(r.content.decode(\"utf-8\"))  with open(\"europe_110.geo.json\", \"r\") as f:     data = json.load(f)   def random_color(feature):     return {         \"color\": \"black\",         \"fillColor\": random.choice([\"red\", \"yellow\", \"green\", \"orange\"]),     }   m = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  geo_json = GeoJSON(     data=data,     style={\"opacity\": 1, \"dashArray\": \"9\", \"fillOpacity\": 0.1, \"weight\": 1},     hover_style={\"color\": \"white\", \"dashArray\": \"0\", \"fillOpacity\": 0.5},     style_callback=random_color, ) m.add(geo_json)  m <pre>Map(center=[50.6252978589571, 0.34580993652344], controls=(ZoomControl(options=['position', 'zoom_in_text', 'z\u2026</pre> In\u00a0[9]: Copied! <pre>map = watergeo.Map(center=[40, -100], zoom=4)\n\n# Read your GeoDataFrame (gdf) from an online source or a local file\n# Example: gdf = gpd.read_file(\"path/to/your/geodataframe.geojson\")\n# makesure use your own file path\ngdf=gpd.read_file(r\"C:\\Users\\andyz\\OneDrive - University of Tennessee\\QGIS\\Appa_2020_SVI_county\\Appa_County_SVI_2020.shp\")\n#gdf=gpd.read_file=(\"docs\\datasets\\countiesAppalachia_ARC_ll83.shp\")\n# Add the GeoDataFrame directly to the map\nmap.add_vector(gdf)\n\n# Add layers control (optional)\nmap.add_layers_control()\n\n# Display the map\nmap\n</pre>  map = watergeo.Map(center=[40, -100], zoom=4)  # Read your GeoDataFrame (gdf) from an online source or a local file # Example: gdf = gpd.read_file(\"path/to/your/geodataframe.geojson\") # makesure use your own file path gdf=gpd.read_file(r\"C:\\Users\\andyz\\OneDrive - University of Tennessee\\QGIS\\Appa_2020_SVI_county\\Appa_County_SVI_2020.shp\") #gdf=gpd.read_file=(\"docs\\datasets\\countiesAppalachia_ARC_ll83.shp\") # Add the GeoDataFrame directly to the map map.add_vector(gdf)  # Add layers control (optional) map.add_layers_control()  # Display the map map  <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre>"},{"location":"examples/vector/#add-vector-and-geojson-function-to-visulize-vector-datasets","title":"Add vector and geojson function to visulize vector datasets\u00b6","text":""},{"location":"examples/waterdata_example/","title":"Waterdata example","text":"<p>Uncomment the following line to install leafmap if needed</p> In\u00a0[1]: Copied! <pre>#pip install leafmap\n</pre> #pip install leafmap In\u00a0[2]: Copied! <pre>import leafmap\nimport duckdb\nimport geopandas as gpd\n</pre> import leafmap import duckdb import geopandas as gpd In\u00a0[3]: Copied! <pre>con=duckdb.connect()\ncon.install_extension(\"httpfs\")\ncon.load_extension(\"httpfs\")\ncon.install_extension(\"spatial\")\ncon.load_extension(\"spatial\")\n</pre> con=duckdb.connect() con.install_extension(\"httpfs\") con.load_extension(\"httpfs\") con.install_extension(\"spatial\") con.load_extension(\"spatial\") In\u00a0[4]: Copied! <pre>m=leafmap.Map()\nm\n</pre> m=leafmap.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/waterdata_example/#appalachia-water-equality-data-visualization-in-leafmap","title":"Appalachia water equality data visualization in leafmap\u00b6","text":""},{"location":"labs/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-02-29 09:48:06.345511\n</pre> In\u00a0[2]: Copied! <pre>print(\"Hello Andy, would you like to learn some Python today?\")\n</pre> print(\"Hello Andy, would you like to learn some Python today?\")  <pre>Hello Andy, would you like to learn some Python today?\n</pre> In\u00a0[3]: Copied! <pre>name= \"kirsten godish\"\nprint(name.upper())\nprint(name.lower())\nprint(name.title())\n</pre> name= \"kirsten godish\" print(name.upper()) print(name.lower()) print(name.title()) <pre>KIRSTEN GODISH\nkirsten godish\nKirsten Godish\n</pre> In\u00a0[4]: Copied! <pre>quote='Waldo Tobler once said, \"everything is related to everything else, but near things are more related than distant things.\"'\nprint(quote)\n</pre> quote='Waldo Tobler once said, \"everything is related to everything else, but near things are more related than distant things.\"' print(quote) <pre>Waldo Tobler once said, \"everything is related to everything else, but near things are more related than distant things.\"\n</pre> In\u00a0[5]: Copied! <pre>name = \"\\t  Kirsten Godish\\n\"\nprint(name)\nprint(name.lstrip())\nprint(name.rstrip())\nprint(name.strip())\n</pre> name = \"\\t  Kirsten Godish\\n\" print(name) print(name.lstrip()) print(name.rstrip()) print(name.strip()) <pre>\t  Kirsten Godish\n\nKirsten Godish\n\n\t  Kirsten Godish\nKirsten Godish\n</pre> In\u00a0[6]: Copied! <pre>names= [\"Eric\", \"Sindupa\", \"Joel\",\"Kirsten\",\"Andy\" ]\nprint(names[0])\nprint(names[1])\nprint(names[2])\nprint(names[3])\nprint(names[4])\n</pre> names= [\"Eric\", \"Sindupa\", \"Joel\",\"Kirsten\",\"Andy\" ] print(names[0]) print(names[1]) print(names[2]) print(names[3]) print(names[4]) <pre>Eric\nSindupa\nJoel\nKirsten\nAndy\n</pre> In\u00a0[7]: Copied! <pre>cars=[\"Toyota Land Cruiser\",\"Toyota Tacoma\",\"Ford F-150\"]\nmessage1=f\"I would like to own a {cars[0]}\"\nmessage2=f\"I would like to own a {cars[1]}\"\nmessage3=f\"I would like to own a {cars[2]}\"\nprint (message1)\nprint(message2)\nprint(message3)\n</pre> cars=[\"Toyota Land Cruiser\",\"Toyota Tacoma\",\"Ford F-150\"] message1=f\"I would like to own a {cars[0]}\" message2=f\"I would like to own a {cars[1]}\" message3=f\"I would like to own a {cars[2]}\" print (message1) print(message2) print(message3) <pre>I would like to own a Toyota Land Cruiser\nI would like to own a Toyota Tacoma\nI would like to own a Ford F-150\n</pre> In\u00a0[8]: Copied! <pre>pizzas= [\"pepperoni\",\"meat lover\",\"hawaii\"]\n\nfor pizza in pizzas:\n    print(f\"I like {pizza.title()} pizza\")\n</pre> pizzas= [\"pepperoni\",\"meat lover\",\"hawaii\"]  for pizza in pizzas:     print(f\"I like {pizza.title()} pizza\") <pre>I like Pepperoni pizza\nI like Meat Lover pizza\nI like Hawaii pizza\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>pizzas= [\"pepperoni\",\"meat lover\",\"hawaii\"]\n\nfor pizza in pizzas:\n    print(f\"I like {pizza.title()} pizza\")\nprint(\"I really love pizza\")\n</pre> pizzas= [\"pepperoni\",\"meat lover\",\"hawaii\"]  for pizza in pizzas:     print(f\"I like {pizza.title()} pizza\") print(\"I really love pizza\") <pre>I like Pepperoni pizza\nI like Meat Lover pizza\nI like Hawaii pizza\nI really love pizza\n</pre> In\u00a0[10]: Copied! <pre>animals=[\"rat\",\"dog\",\"cat\",\"rabbit\"]\nfor a in animals:\n    print(f\"A {a.title()} would make a great pet\")\n</pre> animals=[\"rat\",\"dog\",\"cat\",\"rabbit\"] for a in animals:     print(f\"A {a.title()} would make a great pet\") <pre>A Rat would make a great pet\nA Dog would make a great pet\nA Cat would make a great pet\nA Rabbit would make a great pet\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>for a in animals:\n    print(f\"A {a.title()} would make a great pet\")\nprint(\"Any of these animals are cute and can be house pets\")\n</pre> for a in animals:     print(f\"A {a.title()} would make a great pet\") print(\"Any of these animals are cute and can be house pets\") <pre>A Rat would make a great pet\nA Dog would make a great pet\nA Cat would make a great pet\nA Rabbit would make a great pet\nAny of these animals are cute and can be house pets\n</pre> In\u00a0[12]: Copied! <pre>numbers=list(range(1,101))\nprint(min(numbers))\nprint(max(numbers))\nprint(sum(numbers))\n</pre> numbers=list(range(1,101)) print(min(numbers)) print(max(numbers)) print(sum(numbers)) <pre>1\n100\n5050\n</pre> In\u00a0[13]: Copied! <pre>odd=list(range(1,21,2))\nfor odd in odd:\n    print(odd)\n</pre> odd=list(range(1,21,2)) for odd in odd:     print(odd) <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[14]: Copied! <pre>threes=list(range(3,31,3))\nfor three in threes:\n    print(three)\n</pre> threes=list(range(3,31,3)) for three in threes:     print(three) <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[15]: Copied! <pre>cubes=[value**3 for value in range (1,11)]\nprint(cubes)\n</pre> cubes=[value**3 for value in range (1,11)] print(cubes) <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n</pre> In\u00a0[16]: Copied! <pre>animals=[\"rat\",\"dog\",\"cat\",\"rabbit\"]\nprint(\"the first three animals in the list are:\")\nfor a in animals[:3]:\n    print(a.title())\n</pre> animals=[\"rat\",\"dog\",\"cat\",\"rabbit\"] print(\"the first three animals in the list are:\") for a in animals[:3]:     print(a.title()) <pre>the first three animals in the list are:\nRat\nDog\nCat\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>names= [\"Eric\", \"Sindupa\", \"Joel\",\"Kirsten\",\"Andy\" ]\nprint(\"three names from the middle of the list are:\")\nfor n in names[1:4]:\n    print(n.title())\n</pre> names= [\"Eric\", \"Sindupa\", \"Joel\",\"Kirsten\",\"Andy\" ] print(\"three names from the middle of the list are:\") for n in names[1:4]:     print(n.title()) <pre>three names from the middle of the list are:\nSindupa\nJoel\nKirsten\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>print(\"the last three names from the list are:\")\nfor n in names[2:5]:\n    print(n.title())\n</pre> print(\"the last three names from the list are:\") for n in names[2:5]:     print(n.title()) <pre>the last three names from the list are:\nJoel\nKirsten\nAndy\n</pre> In\u00a0[19]: Copied! <pre>foods=(\"fires\",\"steak\",\"ribs\",\"kongpao chicken\",\"mapo tofu\")\nprint(\"Buffet Food:\")\nfor f in foods:\n    print(f.title())\n</pre> foods=(\"fires\",\"steak\",\"ribs\",\"kongpao chicken\",\"mapo tofu\") print(\"Buffet Food:\") for f in foods:     print(f.title()) <pre>Buffet Food:\nFires\nSteak\nRibs\nKongpao Chicken\nMapo Tofu\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[20]: Copied! <pre>foods=(\"noodle\",\"Dim sum\",\"ribs\",\"kongpao chicken\",\"mapo tofu\")\nprint(\"New Buffet Food:\")\nfor f in foods:\n    print(f.title())\n</pre> foods=(\"noodle\",\"Dim sum\",\"ribs\",\"kongpao chicken\",\"mapo tofu\") print(\"New Buffet Food:\") for f in foods:     print(f.title()) <pre>New Buffet Food:\nNoodle\nDim Sum\nRibs\nKongpao Chicken\nMapo Tofu\n</pre> In\u00a0[21]: Copied! <pre>alien_colors = [\"green\"]\n\nfor color in alien_colors:\n    if color == \"green\":\n        print(\"The player earned 5 points!\")\n</pre> alien_colors = [\"green\"]  for color in alien_colors:     if color == \"green\":         print(\"The player earned 5 points!\") <pre>The player earned 5 points!\n</pre> In\u00a0[22]: Copied! <pre>alien_colors = [\"yellow\"]\n\nfor color in alien_colors:\n    if color == \"green\":\n        print(\"The player earned 5 points!\")\n</pre> alien_colors = [\"yellow\"]  for color in alien_colors:     if color == \"green\":         print(\"The player earned 5 points!\") In\u00a0[23]: Copied! <pre>age = 30\nif age &lt;= 2 :\n    print(\"You are a baby! Very fresh!\")\nelif age &gt;= 2 and age &lt; 4:\n    print(\"You are a toddler, can you walk now?\")\nelif age &gt;=4 and age &lt;13:\n    print(\"You are a kid now! go to school!\")\nelif age &gt;=13 and age&lt; 20: \n    print(\"You are a teenager now, what a pain\")\nelif age &gt;=20 and age &lt; 60:\n    print(\"You are an adult now, do you have a job?\")\n</pre> age = 30 if age &lt;= 2 :     print(\"You are a baby! Very fresh!\") elif age &gt;= 2 and age &lt; 4:     print(\"You are a toddler, can you walk now?\") elif age &gt;=4 and age &lt;13:     print(\"You are a kid now! go to school!\") elif age &gt;=13 and age&lt; 20:      print(\"You are a teenager now, what a pain\") elif age &gt;=20 and age &lt; 60:     print(\"You are an adult now, do you have a job?\") <pre>You are an adult now, do you have a job?\n</pre> In\u00a0[24]: Copied! <pre>fav_fruits = [\"apple\", \"grapefruit\", \"orange\"]\n\nif \"apple\" in fav_fruits:\n    print(\"You really like apples!\")\nif \"banana\" in fav_fruits:\n    print(\"You really like bananas!\")\nif \"orange\" in fav_fruits:\n    print(\"You really like oranges!\")\nif \"grapefruit\" in fav_fruits:\n    print(\"You really like grapefruit!\")\nif \"kiwi\" in fav_fruits:\n    print(\"You really like kiwis!\")\n</pre> fav_fruits = [\"apple\", \"grapefruit\", \"orange\"]  if \"apple\" in fav_fruits:     print(\"You really like apples!\") if \"banana\" in fav_fruits:     print(\"You really like bananas!\") if \"orange\" in fav_fruits:     print(\"You really like oranges!\") if \"grapefruit\" in fav_fruits:     print(\"You really like grapefruit!\") if \"kiwi\" in fav_fruits:     print(\"You really like kiwis!\") <pre>You really like apples!\nYou really like oranges!\nYou really like grapefruit!\n</pre> In\u00a0[25]: Copied! <pre>username=[\"admin\",\"mom\",\"dad\",\"me\",\"dad_work\"]\nfor username in username:\n    if username == \"admin\":\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {username}, thank you for logging in again\")\n</pre> username=[\"admin\",\"mom\",\"dad\",\"me\",\"dad_work\"] for username in username:     if username == \"admin\":         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {username}, thank you for logging in again\") <pre>Hello admin, would you like to see a status report?\nHello mom, thank you for logging in again\nHello dad, thank you for logging in again\nHello me, thank you for logging in again\nHello dad_work, thank you for logging in again\n</pre> In\u00a0[26]: Copied! <pre>current_users= [\"andy\",\"andy_work\",\"andy_game\",\"andyzxm\",\"pandaking\"]\nnew_users=[\"lionking\",\"monkeyking\",\"pandaking\",\"pandakingzxm\",\"andy\"]\n\nfor user in new_users:\n    if user in current_users:\n        print(f\"This username {user} is not available, need to enter a new one\")\n    else: \n        print(f\"This username {user} is available\")\n</pre> current_users= [\"andy\",\"andy_work\",\"andy_game\",\"andyzxm\",\"pandaking\"] new_users=[\"lionking\",\"monkeyking\",\"pandaking\",\"pandakingzxm\",\"andy\"]  for user in new_users:     if user in current_users:         print(f\"This username {user} is not available, need to enter a new one\")     else:          print(f\"This username {user} is available\") <pre>This username lionking is available\nThis username monkeyking is available\nThis username pandaking is not available, need to enter a new one\nThis username pandakingzxm is available\nThis username andy is not available, need to enter a new one\n</pre> In\u00a0[27]: Copied! <pre>number= list(range(1,10))\n\nfor number in number:\n    if number ==1:\n        ordinal= \"1st\"\n    elif number ==2:\n        ordinal= \"2nd\"\n    elif number ==3:\n        ordinal= \"3rd\"\n    else: \n        ordinal= str(number)+\"th\"\n    print(ordinal)\n</pre> number= list(range(1,10))  for number in number:     if number ==1:         ordinal= \"1st\"     elif number ==2:         ordinal= \"2nd\"     elif number ==3:         ordinal= \"3rd\"     else:          ordinal= str(number)+\"th\"     print(ordinal) <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"labs/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"labs/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"labs/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"labs/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"labs/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"labs/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"labs/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"labs/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"labs/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"labs/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"labs/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"labs/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"labs/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"labs/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"labs/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"labs/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"labs/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"labs/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"labs/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"labs/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"labs/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"labs/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"labs/lab5.2/","title":"Lab5.2","text":"In\u00a0[2]: Copied! <pre>person= {\"first_name\": \"Kirsten\", \"last_name\": \"Godish\", \"age\":\"23\",\"city\":\"Charleston\"}\n\nfor key, value in person.items():\n    print(f\"{key}: {value}\")\n</pre> person= {\"first_name\": \"Kirsten\", \"last_name\": \"Godish\", \"age\":\"23\",\"city\":\"Charleston\"}  for key, value in person.items():     print(f\"{key}: {value}\") <pre>first_name: Kirsten\nlast_name: Godish\nage: 23\ncity: Charleston\n</pre> In\u00a0[7]: Copied! <pre>favorite_numbers = { 'andy': 7,'joe': 8,'eric': 9,'kirsten': 10,'sindupa': 11}\nfor person, number in favorite_numbers.items():\n    print(f\"{person}'s favorite number is {number}.\")\n</pre> favorite_numbers = { 'andy': 7,'joe': 8,'eric': 9,'kirsten': 10,'sindupa': 11} for person, number in favorite_numbers.items():     print(f\"{person}'s favorite number is {number}.\") <pre>andy's favorite number is 7.\njoe's favorite number is 8.\neric's favorite number is 9.\nkirsten's favorite number is 10.\nsindupa's favorite number is 11.\n</pre> In\u00a0[8]: Copied! <pre>glossary = {\n    'variable': 'Assigned values using the = operator',\n    'function': 'A block of organized, reusable code that is used to perform a single, related action.',\n    'loop': 'A control flow statement for iterating over a sequence of elements.',\n    'list': 'A Python data type that holds an ordered collection of values,',\n    'dictionary': 'A collection of key-value pairs, where each key is unique.'\n}\nfor word,meaning in glossary.items():\n    print(f\"{word}:  {meaning}\\n\")\n</pre> glossary = {     'variable': 'Assigned values using the = operator',     'function': 'A block of organized, reusable code that is used to perform a single, related action.',     'loop': 'A control flow statement for iterating over a sequence of elements.',     'list': 'A Python data type that holds an ordered collection of values,',     'dictionary': 'A collection of key-value pairs, where each key is unique.' } for word,meaning in glossary.items():     print(f\"{word}:  {meaning}\\n\") <pre>variable:  Assigned values using the = operator\n\nfunction:  A block of organized, reusable code that is used to perform a single, related action.\n\nloop:  A control flow statement for iterating over a sequence of elements.\n\nlist:  A Python data type that holds an ordered collection of values,\n\ndictionary:  A collection of key-value pairs, where each key is unique.\n\n</pre> In\u00a0[9]: Copied! <pre>glossary.update({\n    'string': 'A string is a data type that represents a sequence of characters.',\n    'float': 'Python calls any number with a decimal point a float',\n    'integer': 'Integers represent whole numbers, positive or negative, without any decimal point.',\n    'Module': 'A file containing Python definitions and statements intended for use in other Python programs.',\n    'tuple': 'A collection which is ordered and unchangeable. Allows duplicate members.'\n})\nfor word,meaning in glossary.items():\n    print(f\"{word}:  {meaning}\\n\")\n</pre> glossary.update({     'string': 'A string is a data type that represents a sequence of characters.',     'float': 'Python calls any number with a decimal point a float',     'integer': 'Integers represent whole numbers, positive or negative, without any decimal point.',     'Module': 'A file containing Python definitions and statements intended for use in other Python programs.',     'tuple': 'A collection which is ordered and unchangeable. Allows duplicate members.' }) for word,meaning in glossary.items():     print(f\"{word}:  {meaning}\\n\") <pre>variable:  Assigned values using the = operator\n\nfunction:  A block of organized, reusable code that is used to perform a single, related action.\n\nloop:  A control flow statement for iterating over a sequence of elements.\n\nlist:  A Python data type that holds an ordered collection of values,\n\ndictionary:  A collection of key-value pairs, where each key is unique.\n\nstring:  A string is a data type that represents a sequence of characters.\n\nfloat:  Python calls any number with a decimal point a float\n\ninteger:  Integers represent whole numbers, positive or negative, without any decimal point.\n\nModule:  A file containing Python definitions and statements intended for use in other Python programs.\n\ntuple:  A collection which is ordered and unchangeable. Allows duplicate members.\n\n</pre> In\u00a0[10]: Copied! <pre>river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'}\nfor river,country in river.items():\n    print(f\" The {river} runs through {country}\")\n</pre> river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'} for river,country in river.items():     print(f\" The {river} runs through {country}\")  <pre> The nile runs through egypt\n The yellow river runs through china\n The Mississippi runs through US\n</pre> In\u00a0[11]: Copied! <pre>river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'}\nprint(\"the name of the rivers:\")\nfor river_name in river.keys():\n    print(river_name)\n</pre> river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'} print(\"the name of the rivers:\") for river_name in river.keys():     print(river_name)  <pre>the name of the rivers:\nnile\nyellow river\nMississippi\n</pre> In\u00a0[12]: Copied! <pre>river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'}\nprint(\"the name of the countries:\")\nfor country_name in river.values():\n    print(country_name)\n</pre> river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'} print(\"the name of the countries:\") for country_name in river.values():     print(country_name) <pre>the name of the countries:\negypt\nchina\nUS\n</pre> In\u00a0[13]: Copied! <pre>cities={\"London\": {\n        'country': 'United Kingdom',\n        'population':'8.9 million',\n        'fact': 'Home of Arsenal!'},\n        \n        \"chengdu\":{\n        'country':'China',\n        'population':'16.33 million ',\n        'fact': 'Home of pandas!'},\n\n        \"New York\": {\n        \"country\": \"United States\",\n        \"population\": \"8.4 million\",\n        \"fact\": \"concert jungle where dreams are made of\"}\n        }\n\nfor cities, info in cities.items():\n    print(f\"{cities}:\")\n    print(f\"Country: {info['country']}\")\n    print(f\"Population: {info['population']}\")\n    print(f\"Fact: {info['fact']}\\n\")\n</pre> cities={\"London\": {         'country': 'United Kingdom',         'population':'8.9 million',         'fact': 'Home of Arsenal!'},                  \"chengdu\":{         'country':'China',         'population':'16.33 million ',         'fact': 'Home of pandas!'},          \"New York\": {         \"country\": \"United States\",         \"population\": \"8.4 million\",         \"fact\": \"concert jungle where dreams are made of\"}         }  for cities, info in cities.items():     print(f\"{cities}:\")     print(f\"Country: {info['country']}\")     print(f\"Population: {info['population']}\")     print(f\"Fact: {info['fact']}\\n\") <pre>London:\nCountry: United Kingdom\nPopulation: 8.9 million\nFact: Home of Arsenal!\n\nchengdu:\nCountry: China\nPopulation: 16.33 million \nFact: Home of pandas!\n\nNew York:\nCountry: United States\nPopulation: 8.4 million\nFact: concert jungle where dreams are made of\n\n</pre> In\u00a0[56]: Copied! <pre>rental_car = input(\"What kind of rental car would you like? \")\nprint(f\"Let me see if I can find you a {rental_car}.\")\n</pre> rental_car = input(\"What kind of rental car would you like? \") print(f\"Let me see if I can find you a {rental_car}.\")   <pre>Let me see if I can find you a toyota.\n</pre> In\u00a0[55]: Copied! <pre>restaurant_seating = input(\"How many people are in your dinner group? \")\nrestaurant_seating = int(restaurant_seating)\nif restaurant_seating &gt; 10:\n    print (\"Sorry you need to wait for a table.\")\nelse: \n    print(\"Your table is ready.\")\n</pre> restaurant_seating = input(\"How many people are in your dinner group? \") restaurant_seating = int(restaurant_seating) if restaurant_seating &gt; 10:     print (\"Sorry you need to wait for a table.\") else:      print(\"Your table is ready.\") <pre>Your table is ready.\n</pre> In\u00a0[16]: Copied! <pre>numbers=input(\"give me a number and I will tell you if it is a multiple of 10 or not:\")\nnumbers = int(numbers)\n\nif numbers % 10 == 0:\n    print(f\"{numbers} is a multiple of 10.\")\nelse:\n    print(f\"{numbers} is not a multiple of 10.\")\n</pre> numbers=input(\"give me a number and I will tell you if it is a multiple of 10 or not:\") numbers = int(numbers)  if numbers % 10 == 0:     print(f\"{numbers} is a multiple of 10.\") else:     print(f\"{numbers} is not a multiple of 10.\") <pre>1000 is a multiple of 10.\n</pre> In\u00a0[17]: Copied! <pre>pizza_toppings = []\nwhile True:\n    topping = input(\"Add this topping on the pizza: \")\n    if topping == \"quit\":\n        break\n    else:\n        print(f\"you will add {topping} on the pizza\")\n</pre> pizza_toppings = [] while True:     topping = input(\"Add this topping on the pizza: \")     if topping == \"quit\":         break     else:         print(f\"you will add {topping} on the pizza\") <pre>you will add meat on the pizza\nyou will add olive on the pizza\nyou will add pepper on the pizza\n</pre> In\u00a0[18]: Copied! <pre>def display_message():\n    print(\"We are learning about pizza toppings and different functions in this chapter\")\n\ndisplay_message()\n</pre> def display_message():     print(\"We are learning about pizza toppings and different functions in this chapter\")  display_message() <pre>We are learning about pizza toppings and different functions in this chapter\n</pre> In\u00a0[19]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}\")\n    \nfavorite_book(\"Do Androids Dream of Electric Sheep?\")\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}\")      favorite_book(\"Do Androids Dream of Electric Sheep?\")  <pre>One of my favorite books is Do Androids Dream of Electric Sheep?\n</pre> In\u00a0[20]: Copied! <pre>def make_shirt(size, text):\n    print(f\"the size of the shirt is {size}\");\n    print(f\"the text on the shirt is {text}\")\n\nmake_shirt(\"medium\",\"Hello world\\n\")\n\nmake_shirt(size='small', text='Hello world')\n</pre> def make_shirt(size, text):     print(f\"the size of the shirt is {size}\");     print(f\"the text on the shirt is {text}\")  make_shirt(\"medium\",\"Hello world\\n\")  make_shirt(size='small', text='Hello world') <pre>the size of the shirt is medium\nthe text on the shirt is Hello world\n\nthe size of the shirt is small\nthe text on the shirt is Hello world\n</pre> In\u00a0[21]: Copied! <pre>def make_shirt(size='large', text='I Love Python'):\n    print(f\"the size of the shirt is {size}\");\n    print(f\"the text on the shirt is {text}\")\n\nmake_shirt()\nmake_shirt(\"medium\")\nmake_shirt(\"small\",\"Do I really love Python?\")\n</pre> def make_shirt(size='large', text='I Love Python'):     print(f\"the size of the shirt is {size}\");     print(f\"the text on the shirt is {text}\")  make_shirt() make_shirt(\"medium\") make_shirt(\"small\",\"Do I really love Python?\") <pre>the size of the shirt is large\nthe text on the shirt is I Love Python\nthe size of the shirt is medium\nthe text on the shirt is I Love Python\nthe size of the shirt is small\nthe text on the shirt is Do I really love Python?\n</pre> In\u00a0[22]: Copied! <pre>def describe_city(city,country='UK'):\n    print(f\" {city} is in {country}\")\n\ndescribe_city(\"London\")\ndescribe_city(\"Liverpool\")\ndescribe_city(\"New York\",\"USA\")\n</pre> def describe_city(city,country='UK'):     print(f\" {city} is in {country}\")  describe_city(\"London\") describe_city(\"Liverpool\") describe_city(\"New York\",\"USA\") <pre> London is in UK\n Liverpool is in UK\n New York is in USA\n</pre> In\u00a0[23]: Copied! <pre>def city_country(city,country):\n    return f\"{city}, {country}\"\n\nprint(city_country('London','UK'))\nprint(city_country('Liverpool','UK'))\nprint(city_country('Dublin','Ireland'))\n</pre> def city_country(city,country):     return f\"{city}, {country}\"  print(city_country('London','UK')) print(city_country('Liverpool','UK')) print(city_country('Dublin','Ireland')) <pre>London, UK\nLiverpool, UK\nDublin, Ireland\n</pre> In\u00a0[24]: Copied! <pre>def make_album(artist, album_title,numbers=None):\n    album={\"artist\":artist, \"album_title\":album_title}\n    if numbers:\n        album['songs']=numbers\n    return album\nprint(make_album(\"Eagles\",\"Hotel California\"))\nprint(make_album(\"AC/DC\",\"High way to hell\"))\nprint(make_album(\"metallica\",\"Master of Puppets\",8))\n</pre> def make_album(artist, album_title,numbers=None):     album={\"artist\":artist, \"album_title\":album_title}     if numbers:         album['songs']=numbers     return album print(make_album(\"Eagles\",\"Hotel California\")) print(make_album(\"AC/DC\",\"High way to hell\")) print(make_album(\"metallica\",\"Master of Puppets\",8)) <pre>{'artist': 'Eagles', 'album_title': 'Hotel California'}\n{'artist': 'AC/DC', 'album_title': 'High way to hell'}\n{'artist': 'metallica', 'album_title': 'Master of Puppets', 'songs': 8}\n</pre> In\u00a0[25]: Copied! <pre>def make_album(artist, album_title,numbers=None):\n    album={\"artist\":artist, \"album_title\":album_title}\n    return album\n\nwhile True:\n    artist = input(\" the Artist's name: \")\n    if artist == 'quit':\n        break\n    album_title= input(\"album title: \")\n    if album_title == 'quit':\n        break\n       \n    album = make_album(artist, album_title)\n    print(album)\n</pre> def make_album(artist, album_title,numbers=None):     album={\"artist\":artist, \"album_title\":album_title}     return album  while True:     artist = input(\" the Artist's name: \")     if artist == 'quit':         break     album_title= input(\"album title: \")     if album_title == 'quit':         break             album = make_album(artist, album_title)     print(album)  <pre>{'artist': 'Eagles', 'album_title': 'Hotel California'}\n</pre> In\u00a0[26]: Copied! <pre>def show_messages(messages):\n    for msg in messages:\n        print(msg)\nmessages = [\"what is the message?\", \"what's up?\", \"how is it going?\"]\n\nshow_messages(messages)\n</pre> def show_messages(messages):     for msg in messages:         print(msg) messages = [\"what is the message?\", \"what's up?\", \"how is it going?\"]  show_messages(messages)  <pre>what is the message?\nwhat's up?\nhow is it going?\n</pre> In\u00a0[27]: Copied! <pre>messages = [\"what is the message?\", \"what's up?\", \"how is it going?\"]\nsent_messages = []\n\ndef send_messages(unsent_messages, sent_messages):\n    while unsent_messages:\n        current_message = unsent_messages.pop()\n        print(f\"Sending message: {current_message}\") \n        sent_messages.append(current_message)\n\n\nsend_messages(messages, sent_messages)\n\n\nprint(\"Unsent messages:\", messages)  \nprint(\"Sent messages:\", sent_messages)\n</pre>  messages = [\"what is the message?\", \"what's up?\", \"how is it going?\"] sent_messages = []  def send_messages(unsent_messages, sent_messages):     while unsent_messages:         current_message = unsent_messages.pop()         print(f\"Sending message: {current_message}\")          sent_messages.append(current_message)   send_messages(messages, sent_messages)   print(\"Unsent messages:\", messages)   print(\"Sent messages:\", sent_messages)   <pre>Sending message: how is it going?\nSending message: what's up?\nSending message: what is the message?\nUnsent messages: []\nSent messages: ['how is it going?', \"what's up?\", 'what is the message?']\n</pre> In\u00a0[49]: Copied! <pre>with open(\"learning_python.txt\") as file_object:\n    contents = file_object.read()\nprint(contents)\n</pre> with open(\"learning_python.txt\") as file_object:     contents = file_object.read() print(contents)  <pre>In Python, You can learn all kinds of cool programming tricks. These are the basics for something greater in the future! \nIn Python, You can even make maps and use them like GIS tools in Python as well. Incredible! \n</pre> In\u00a0[52]: Copied! <pre>with open(\"learning_python.txt\") as file_object:\n    for line in file_object:\n        print(line.rstrip())\n</pre> with open(\"learning_python.txt\") as file_object:     for line in file_object:         print(line.rstrip()) <pre>In Python, You can learn all kinds of cool programming tricks. These are the basics for something greater in the future!\nIn Python, You can even make maps and use them like GIS tools in Python as well. Incredible!\n</pre> In\u00a0[53]: Copied! <pre>with open(\"learning_python.txt\") as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.rstrip())\n</pre> with open(\"learning_python.txt\") as file_object:     lines = file_object.readlines()  for line in lines:     print(line.rstrip()) <pre>In Python, You can learn all kinds of cool programming tricks. These are the basics for something greater in the future!\nIn Python, You can even make maps and use them like GIS tools in Python as well. Incredible!\n</pre> In\u00a0[1]: Copied! <pre>with open(\"learning_python.txt\") as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    modified_line = line.replace('Python', 'C')\n    print(modified_line.rstrip())\n</pre> with open(\"learning_python.txt\") as file_object:     lines = file_object.readlines()  for line in lines:     modified_line = line.replace('Python', 'C')     print(modified_line.rstrip()) <pre>In C, You can learn all kinds of cool programming tricks. These are the basics for something greater in the future!\nIn C, You can even make maps and use them like GIS tools in C as well. Incredible!\n</pre> In\u00a0[3]: Copied! <pre>name = input(\"Please enter your name: \")\n\nwith open('guest.txt', 'w') as file:\n    file.write(name)\n\nprint(f\"{name}'s name has been written to guest.txt.\")\n</pre> name = input(\"Please enter your name: \")  with open('guest.txt', 'w') as file:     file.write(name)  print(f\"{name}'s name has been written to guest.txt.\") <pre>Andy's name has been written to guest.txt.\n</pre> In\u00a0[5]: Copied! <pre>with open(\"guest_book.txt\", \"a\") as file:\n    while True:\n        name = input(\"Please enter your name (or type 'quit' to exit): \")\n        if name == \"quit\":\n            break\n        print(f\"Hello, {name}! Welcome to our guest book.\")\n\n        file.write(name + \"\\n\")\n        print(\"Thank you for visiting! your visit has been recorded\")\n</pre> with open(\"guest_book.txt\", \"a\") as file:     while True:         name = input(\"Please enter your name (or type 'quit' to exit): \")         if name == \"quit\":             break         print(f\"Hello, {name}! Welcome to our guest book.\")          file.write(name + \"\\n\")         print(\"Thank you for visiting! your visit has been recorded\")   <pre>Hello, Andy! Welcome to our guest book.\nThank you for visiting! your visit has been recorded\nHello, Eric! Welcome to our guest book.\nThank you for visiting! your visit has been recorded\n</pre> In\u00a0[7]: Copied! <pre>with open(\"Programming Poll.txt\", \"a\") as file:\n    while True:\n        reasons = input(\"why do you like programming (or type 'quit' to exit): \")\n        if reasons == \"quit\":\n            break\n        file.write(reasons + \"\\n\")\n        print(\"your poll has been recorded, thank you! \")\n</pre> with open(\"Programming Poll.txt\", \"a\") as file:     while True:         reasons = input(\"why do you like programming (or type 'quit' to exit): \")         if reasons == \"quit\":             break         file.write(reasons + \"\\n\")         print(\"your poll has been recorded, thank you! \") <pre>your poll has been recorded, thank you! \n</pre> In\u00a0[10]: Copied! <pre>while True:\n    try:\n        number1 = input(\"First number\")\n        number2 = input(\"Second number\")\n\n        result = int(number1) + int(number2)\n        print(f\"the sum of {number1} and {number2} is {result}\")\n        break\n    except ValueError: \n        print(\"Invalid numbers, please try again with valid numbers\")\n</pre> while True:     try:         number1 = input(\"First number\")         number2 = input(\"Second number\")          result = int(number1) + int(number2)         print(f\"the sum of {number1} and {number2} is {result}\")         break     except ValueError:          print(\"Invalid numbers, please try again with valid numbers\") <pre>Invalid numbers, please try again with valid numbers\nthe sum of 1 and 2 is 3\n</pre> In\u00a0[16]: Copied! <pre>while True:\n    try:\n        number1 = input(\"Enter the first number (or 'quit' to exit): \")\n\n        if number1 == 'quit':\n            break  \n\n        number2 = input(\"Enter the second number: \")\n        result = int(number1) + int(number2)\n        print(f\"The sum of {number1} and {number2} is {result}\")\n\n    except ValueError:\n        \n        print(\"Invalid input. Please enter valid numbers.\")\n</pre> while True:     try:         number1 = input(\"Enter the first number (or 'quit' to exit): \")          if number1 == 'quit':             break            number2 = input(\"Enter the second number: \")         result = int(number1) + int(number2)         print(f\"The sum of {number1} and {number2} is {result}\")      except ValueError:                  print(\"Invalid input. Please enter valid numbers.\")  <pre>Invalid input. Please enter valid numbers.\nInvalid input. Please enter valid numbers.\nThe sum of 4 and 5 is 9\nThe sum of 6 and 7 is 13\n</pre> In\u00a0[30]: Copied! <pre>try:\n    with open(\"cats.txt\") as catfile:\n        print(\"the cats names are \")\n        print(catfile.read())\n\n    with open(\"dogs.txt\") as dogfile:\n        print(\"the dogs names are\")\n        print(dogfile.read())\n\nexcept FileNotFoundError:\n    print(\"\\nOne of the files is missing\")\n</pre>  try:     with open(\"cats.txt\") as catfile:         print(\"the cats names are \")         print(catfile.read())      with open(\"dogs.txt\") as dogfile:         print(\"the dogs names are\")         print(dogfile.read())  except FileNotFoundError:     print(\"\\nOne of the files is missing\")  <pre>the cats names are \nFinn\nhoagie\nmochi\n\nOne of the files is missing\n</pre> In\u00a0[33]: Copied! <pre>try:\n    with open(\"cats.txt\") as catfile:\n        print(\"the cats names are \")\n        print(catfile.read())\n\n    with open(\"dogs.txt\") as dogfile:\n        print(\"the dogs names are\")\n        print(dogfile.read())\n\nexcept FileNotFoundError:\n    pass\nelse:\n    print(\"\\nOne of the files is missing\")\n</pre> try:     with open(\"cats.txt\") as catfile:         print(\"the cats names are \")         print(catfile.read())      with open(\"dogs.txt\") as dogfile:         print(\"the dogs names are\")         print(dogfile.read())  except FileNotFoundError:     pass else:     print(\"\\nOne of the files is missing\")  <pre>the cats names are \nFinn\nhoagie\nmochi\n</pre> In\u00a0[34]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[34]: <pre>2</pre> In\u00a0[35]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[35]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[41]: Copied! <pre>filename = \"Thunder in space.txt\"\n</pre> filename = \"Thunder in space.txt\" In\u00a0[45]: Copied! <pre>def count_the(filename):\n    \"\"\"Count the approximate number of words in a file.\"\"\"\n    try:\n        with open(filename, encoding=\"utf-8\") as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        count = contents.lower().count('the')\n        print(f\"The file {filename} has {count} occurrences of the word 'the'.\")\n\ncount_the(filename)\n</pre> def count_the(filename):     \"\"\"Count the approximate number of words in a file.\"\"\"     try:         with open(filename, encoding=\"utf-8\") as f:             contents = f.read()     except FileNotFoundError:         pass     else:         count = contents.lower().count('the')         print(f\"The file {filename} has {count} occurrences of the word 'the'.\")  count_the(filename) <pre>The file Thunder in space.txt has 1489 occurrences of the word 'the'.\n</pre> In\u00a0[46]: Copied! <pre>def count_the(filename):\n    \"\"\"Count the approximate number of words in a file.\"\"\"\n    try:\n        with open(filename, encoding=\"utf-8\") as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        count = contents.lower().count(' the')\n        print(f\"The file {filename} has {count} occurrences of the word 'the'.\")\n\ncount_the(filename)\n</pre> def count_the(filename):     \"\"\"Count the approximate number of words in a file.\"\"\"     try:         with open(filename, encoding=\"utf-8\") as f:             contents = f.read()     except FileNotFoundError:         pass     else:         count = contents.lower().count(' the')         print(f\"The file {filename} has {count} occurrences of the word 'the'.\")  count_the(filename) <pre>The file Thunder in space.txt has 1229 occurrences of the word 'the'.\n</pre>"},{"location":"labs/lab5.2/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"labs/lab5.2/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"labs/lab5.2/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"labs/lab5.2/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"labs/lab5.2/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"labs/lab5.2/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"labs/lab5.2/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"labs/lab5.2/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"labs/lab5.2/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"labs/lab5.2/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"labs/lab5.2/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"labs/lab5.2/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"labs/lab5.2/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"labs/lab5.2/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"labs/lab5.2/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"labs/lab5.2/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"labs/lab5.2/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"labs/lab5.2/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"labs/lab5.2/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"labs/lab5.2/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"labs/lab5.2/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"labs/lab5.2/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"labs/lab5.2/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"labs/lab5.2/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"labs/lab5.2/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"labs/lab5.2/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"labs/lab5.2/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"labs/lab5.2/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"labs/lab5.2/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"labs/lab5.2/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"labs/lab5.2/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"labs/lab5.2/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"labs/lab5/","title":"Lab5","text":"In\u00a0[2]: Copied! <pre>person= {\"first_name\": \"Kirsten\", \"last_name\": \"Godish\", \"age\":\"23\",\"city\":\"Charleston\"}\n\nfor key, value in person.items():\n    print(f\"{key}: {value}\")\n</pre> person= {\"first_name\": \"Kirsten\", \"last_name\": \"Godish\", \"age\":\"23\",\"city\":\"Charleston\"}  for key, value in person.items():     print(f\"{key}: {value}\") <pre>first_name: Kirsten\nlast_name: Godish\nage: 23\ncity: Charleston\n</pre> In\u00a0[7]: Copied! <pre>favorite_numbers = { 'andy': 7,'joe': 8,'eric': 9,'kirsten': 10,'sindupa': 11}\nfor person, number in favorite_numbers.items():\n    print(f\"{person}'s favorite number is {number}.\")\n</pre> favorite_numbers = { 'andy': 7,'joe': 8,'eric': 9,'kirsten': 10,'sindupa': 11} for person, number in favorite_numbers.items():     print(f\"{person}'s favorite number is {number}.\") <pre>andy's favorite number is 7.\njoe's favorite number is 8.\neric's favorite number is 9.\nkirsten's favorite number is 10.\nsindupa's favorite number is 11.\n</pre> In\u00a0[8]: Copied! <pre>glossary = {\n    'variable': 'Assigned values using the = operator',\n    'function': 'A block of organized, reusable code that is used to perform a single, related action.',\n    'loop': 'A control flow statement for iterating over a sequence of elements.',\n    'list': 'A Python data type that holds an ordered collection of values,',\n    'dictionary': 'A collection of key-value pairs, where each key is unique.'\n}\nfor word,meaning in glossary.items():\n    print(f\"{word}:  {meaning}\\n\")\n</pre> glossary = {     'variable': 'Assigned values using the = operator',     'function': 'A block of organized, reusable code that is used to perform a single, related action.',     'loop': 'A control flow statement for iterating over a sequence of elements.',     'list': 'A Python data type that holds an ordered collection of values,',     'dictionary': 'A collection of key-value pairs, where each key is unique.' } for word,meaning in glossary.items():     print(f\"{word}:  {meaning}\\n\") <pre>variable:  Assigned values using the = operator\n\nfunction:  A block of organized, reusable code that is used to perform a single, related action.\n\nloop:  A control flow statement for iterating over a sequence of elements.\n\nlist:  A Python data type that holds an ordered collection of values,\n\ndictionary:  A collection of key-value pairs, where each key is unique.\n\n</pre> In\u00a0[9]: Copied! <pre>glossary.update({\n    'string': 'A string is a data type that represents a sequence of characters.',\n    'float': 'Python calls any number with a decimal point a float',\n    'integer': 'Integers represent whole numbers, positive or negative, without any decimal point.',\n    'Module': 'A file containing Python definitions and statements intended for use in other Python programs.',\n    'tuple': 'A collection which is ordered and unchangeable. Allows duplicate members.'\n})\nfor word,meaning in glossary.items():\n    print(f\"{word}:  {meaning}\\n\")\n</pre> glossary.update({     'string': 'A string is a data type that represents a sequence of characters.',     'float': 'Python calls any number with a decimal point a float',     'integer': 'Integers represent whole numbers, positive or negative, without any decimal point.',     'Module': 'A file containing Python definitions and statements intended for use in other Python programs.',     'tuple': 'A collection which is ordered and unchangeable. Allows duplicate members.' }) for word,meaning in glossary.items():     print(f\"{word}:  {meaning}\\n\") <pre>variable:  Assigned values using the = operator\n\nfunction:  A block of organized, reusable code that is used to perform a single, related action.\n\nloop:  A control flow statement for iterating over a sequence of elements.\n\nlist:  A Python data type that holds an ordered collection of values,\n\ndictionary:  A collection of key-value pairs, where each key is unique.\n\nstring:  A string is a data type that represents a sequence of characters.\n\nfloat:  Python calls any number with a decimal point a float\n\ninteger:  Integers represent whole numbers, positive or negative, without any decimal point.\n\nModule:  A file containing Python definitions and statements intended for use in other Python programs.\n\ntuple:  A collection which is ordered and unchangeable. Allows duplicate members.\n\n</pre> In\u00a0[10]: Copied! <pre>river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'}\nfor river,country in river.items():\n    print(f\" The {river} runs through {country}\")\n</pre> river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'} for river,country in river.items():     print(f\" The {river} runs through {country}\")  <pre> The nile runs through egypt\n The yellow river runs through china\n The Mississippi runs through US\n</pre> In\u00a0[11]: Copied! <pre>river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'}\nprint(\"the name of the rivers:\")\nfor river_name in river.keys():\n    print(river_name)\n</pre> river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'} print(\"the name of the rivers:\") for river_name in river.keys():     print(river_name)  <pre>the name of the rivers:\nnile\nyellow river\nMississippi\n</pre> In\u00a0[12]: Copied! <pre>river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'}\nprint(\"the name of the countries:\")\nfor country_name in river.values():\n    print(country_name)\n</pre> river = {'nile': 'egypt', 'yellow river': 'china', 'Mississippi':'US'} print(\"the name of the countries:\") for country_name in river.values():     print(country_name) <pre>the name of the countries:\negypt\nchina\nUS\n</pre> In\u00a0[13]: Copied! <pre>cities={\"London\": {\n        'country': 'United Kingdom',\n        'population':'8.9 million',\n        'fact': 'Home of Arsenal!'},\n        \n        \"chengdu\":{\n        'country':'China',\n        'population':'16.33 million ',\n        'fact': 'Home of pandas!'},\n\n        \"New York\": {\n        \"country\": \"United States\",\n        \"population\": \"8.4 million\",\n        \"fact\": \"concert jungle where dreams are made of\"}\n        }\n\nfor cities, info in cities.items():\n    print(f\"{cities}:\")\n    print(f\"Country: {info['country']}\")\n    print(f\"Population: {info['population']}\")\n    print(f\"Fact: {info['fact']}\\n\")\n</pre> cities={\"London\": {         'country': 'United Kingdom',         'population':'8.9 million',         'fact': 'Home of Arsenal!'},                  \"chengdu\":{         'country':'China',         'population':'16.33 million ',         'fact': 'Home of pandas!'},          \"New York\": {         \"country\": \"United States\",         \"population\": \"8.4 million\",         \"fact\": \"concert jungle where dreams are made of\"}         }  for cities, info in cities.items():     print(f\"{cities}:\")     print(f\"Country: {info['country']}\")     print(f\"Population: {info['population']}\")     print(f\"Fact: {info['fact']}\\n\") <pre>London:\nCountry: United Kingdom\nPopulation: 8.9 million\nFact: Home of Arsenal!\n\nchengdu:\nCountry: China\nPopulation: 16.33 million \nFact: Home of pandas!\n\nNew York:\nCountry: United States\nPopulation: 8.4 million\nFact: concert jungle where dreams are made of\n\n</pre> In\u00a0[56]: Copied! <pre>rental_car = input(\"What kind of rental car would you like? \")\nprint(f\"Let me see if I can find you a {rental_car}.\")\n</pre> rental_car = input(\"What kind of rental car would you like? \") print(f\"Let me see if I can find you a {rental_car}.\")   <pre>Let me see if I can find you a toyota.\n</pre> In\u00a0[55]: Copied! <pre>restaurant_seating = input(\"How many people are in your dinner group? \")\nrestaurant_seating = int(restaurant_seating)\nif restaurant_seating &gt; 10:\n    print (\"Sorry you need to wait for a table.\")\nelse: \n    print(\"Your table is ready.\")\n</pre> restaurant_seating = input(\"How many people are in your dinner group? \") restaurant_seating = int(restaurant_seating) if restaurant_seating &gt; 10:     print (\"Sorry you need to wait for a table.\") else:      print(\"Your table is ready.\") <pre>Your table is ready.\n</pre> In\u00a0[16]: Copied! <pre>numbers=input(\"give me a number and I will tell you if it is a multiple of 10 or not:\")\nnumbers = int(numbers)\n\nif numbers % 10 == 0:\n    print(f\"{numbers} is a multiple of 10.\")\nelse:\n    print(f\"{numbers} is not a multiple of 10.\")\n</pre> numbers=input(\"give me a number and I will tell you if it is a multiple of 10 or not:\") numbers = int(numbers)  if numbers % 10 == 0:     print(f\"{numbers} is a multiple of 10.\") else:     print(f\"{numbers} is not a multiple of 10.\") <pre>1000 is a multiple of 10.\n</pre> In\u00a0[17]: Copied! <pre>pizza_toppings = []\nwhile True:\n    topping = input(\"Add this topping on the pizza: \")\n    if topping == \"quit\":\n        break\n    else:\n        print(f\"you will add {topping} on the pizza\")\n</pre> pizza_toppings = [] while True:     topping = input(\"Add this topping on the pizza: \")     if topping == \"quit\":         break     else:         print(f\"you will add {topping} on the pizza\") <pre>you will add meat on the pizza\nyou will add olive on the pizza\nyou will add pepper on the pizza\n</pre> In\u00a0[18]: Copied! <pre>def display_message():\n    print(\"We are learning about pizza toppings and different functions in this chapter\")\n\ndisplay_message()\n</pre> def display_message():     print(\"We are learning about pizza toppings and different functions in this chapter\")  display_message() <pre>We are learning about pizza toppings and different functions in this chapter\n</pre> In\u00a0[19]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}\")\n    \nfavorite_book(\"Do Androids Dream of Electric Sheep?\")\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}\")      favorite_book(\"Do Androids Dream of Electric Sheep?\")  <pre>One of my favorite books is Do Androids Dream of Electric Sheep?\n</pre> In\u00a0[20]: Copied! <pre>def make_shirt(size, text):\n    print(f\"the size of the shirt is {size}\");\n    print(f\"the text on the shirt is {text}\")\n\nmake_shirt(\"medium\",\"Hello world\\n\")\n\nmake_shirt(size='small', text='Hello world')\n</pre> def make_shirt(size, text):     print(f\"the size of the shirt is {size}\");     print(f\"the text on the shirt is {text}\")  make_shirt(\"medium\",\"Hello world\\n\")  make_shirt(size='small', text='Hello world') <pre>the size of the shirt is medium\nthe text on the shirt is Hello world\n\nthe size of the shirt is small\nthe text on the shirt is Hello world\n</pre> In\u00a0[21]: Copied! <pre>def make_shirt(size='large', text='I Love Python'):\n    print(f\"the size of the shirt is {size}\");\n    print(f\"the text on the shirt is {text}\")\n\nmake_shirt()\nmake_shirt(\"medium\")\nmake_shirt(\"small\",\"Do I really love Python?\")\n</pre> def make_shirt(size='large', text='I Love Python'):     print(f\"the size of the shirt is {size}\");     print(f\"the text on the shirt is {text}\")  make_shirt() make_shirt(\"medium\") make_shirt(\"small\",\"Do I really love Python?\") <pre>the size of the shirt is large\nthe text on the shirt is I Love Python\nthe size of the shirt is medium\nthe text on the shirt is I Love Python\nthe size of the shirt is small\nthe text on the shirt is Do I really love Python?\n</pre> In\u00a0[22]: Copied! <pre>def describe_city(city,country='UK'):\n    print(f\" {city} is in {country}\")\n\ndescribe_city(\"London\")\ndescribe_city(\"Liverpool\")\ndescribe_city(\"New York\",\"USA\")\n</pre> def describe_city(city,country='UK'):     print(f\" {city} is in {country}\")  describe_city(\"London\") describe_city(\"Liverpool\") describe_city(\"New York\",\"USA\") <pre> London is in UK\n Liverpool is in UK\n New York is in USA\n</pre> In\u00a0[23]: Copied! <pre>def city_country(city,country):\n    return f\"{city}, {country}\"\n\nprint(city_country('London','UK'))\nprint(city_country('Liverpool','UK'))\nprint(city_country('Dublin','Ireland'))\n</pre> def city_country(city,country):     return f\"{city}, {country}\"  print(city_country('London','UK')) print(city_country('Liverpool','UK')) print(city_country('Dublin','Ireland')) <pre>London, UK\nLiverpool, UK\nDublin, Ireland\n</pre> In\u00a0[24]: Copied! <pre>def make_album(artist, album_title,numbers=None):\n    album={\"artist\":artist, \"album_title\":album_title}\n    if numbers:\n        album['songs']=numbers\n    return album\nprint(make_album(\"Eagles\",\"Hotel California\"))\nprint(make_album(\"AC/DC\",\"High way to hell\"))\nprint(make_album(\"metallica\",\"Master of Puppets\",8))\n</pre> def make_album(artist, album_title,numbers=None):     album={\"artist\":artist, \"album_title\":album_title}     if numbers:         album['songs']=numbers     return album print(make_album(\"Eagles\",\"Hotel California\")) print(make_album(\"AC/DC\",\"High way to hell\")) print(make_album(\"metallica\",\"Master of Puppets\",8)) <pre>{'artist': 'Eagles', 'album_title': 'Hotel California'}\n{'artist': 'AC/DC', 'album_title': 'High way to hell'}\n{'artist': 'metallica', 'album_title': 'Master of Puppets', 'songs': 8}\n</pre> In\u00a0[25]: Copied! <pre>def make_album(artist, album_title,numbers=None):\n    album={\"artist\":artist, \"album_title\":album_title}\n    return album\n\nwhile True:\n    artist = input(\" the Artist's name: \")\n    if artist == 'quit':\n        break\n    album_title= input(\"album title: \")\n    if album_title == 'quit':\n        break\n       \n    album = make_album(artist, album_title)\n    print(album)\n</pre> def make_album(artist, album_title,numbers=None):     album={\"artist\":artist, \"album_title\":album_title}     return album  while True:     artist = input(\" the Artist's name: \")     if artist == 'quit':         break     album_title= input(\"album title: \")     if album_title == 'quit':         break             album = make_album(artist, album_title)     print(album)  <pre>{'artist': 'Eagles', 'album_title': 'Hotel California'}\n</pre> In\u00a0[26]: Copied! <pre>def show_messages(messages):\n    for msg in messages:\n        print(msg)\nmessages = [\"what is the message?\", \"what's up?\", \"how is it going?\"]\n\nshow_messages(messages)\n</pre> def show_messages(messages):     for msg in messages:         print(msg) messages = [\"what is the message?\", \"what's up?\", \"how is it going?\"]  show_messages(messages)  <pre>what is the message?\nwhat's up?\nhow is it going?\n</pre> In\u00a0[27]: Copied! <pre>messages = [\"what is the message?\", \"what's up?\", \"how is it going?\"]\nsent_messages = []\n\ndef send_messages(unsent_messages, sent_messages):\n    while unsent_messages:\n        current_message = unsent_messages.pop()\n        print(f\"Sending message: {current_message}\") \n        sent_messages.append(current_message)\n\n\nsend_messages(messages, sent_messages)\n\n\nprint(\"Unsent messages:\", messages)  \nprint(\"Sent messages:\", sent_messages)\n</pre>  messages = [\"what is the message?\", \"what's up?\", \"how is it going?\"] sent_messages = []  def send_messages(unsent_messages, sent_messages):     while unsent_messages:         current_message = unsent_messages.pop()         print(f\"Sending message: {current_message}\")          sent_messages.append(current_message)   send_messages(messages, sent_messages)   print(\"Unsent messages:\", messages)   print(\"Sent messages:\", sent_messages)   <pre>Sending message: how is it going?\nSending message: what's up?\nSending message: what is the message?\nUnsent messages: []\nSent messages: ['how is it going?', \"what's up?\", 'what is the message?']\n</pre> In\u00a0[49]: Copied! <pre>with open(\"learning_python.txt\") as file_object:\n    contents = file_object.read()\nprint(contents)\n</pre> with open(\"learning_python.txt\") as file_object:     contents = file_object.read() print(contents)  <pre>In Python, You can learn all kinds of cool programming tricks. These are the basics for something greater in the future! \nIn Python, You can even make maps and use them like GIS tools in Python as well. Incredible! \n</pre> In\u00a0[52]: Copied! <pre>with open(\"learning_python.txt\") as file_object:\n    for line in file_object:\n        print(line.rstrip())\n</pre> with open(\"learning_python.txt\") as file_object:     for line in file_object:         print(line.rstrip()) <pre>In Python, You can learn all kinds of cool programming tricks. These are the basics for something greater in the future!\nIn Python, You can even make maps and use them like GIS tools in Python as well. Incredible!\n</pre> In\u00a0[53]: Copied! <pre>with open(\"learning_python.txt\") as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.rstrip())\n</pre> with open(\"learning_python.txt\") as file_object:     lines = file_object.readlines()  for line in lines:     print(line.rstrip()) <pre>In Python, You can learn all kinds of cool programming tricks. These are the basics for something greater in the future!\nIn Python, You can even make maps and use them like GIS tools in Python as well. Incredible!\n</pre> In\u00a0[1]: Copied! <pre>with open(\"learning_python.txt\") as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    modified_line = line.replace('Python', 'C')\n    print(modified_line.rstrip())\n</pre> with open(\"learning_python.txt\") as file_object:     lines = file_object.readlines()  for line in lines:     modified_line = line.replace('Python', 'C')     print(modified_line.rstrip()) <pre>In C, You can learn all kinds of cool programming tricks. These are the basics for something greater in the future!\nIn C, You can even make maps and use them like GIS tools in C as well. Incredible!\n</pre> In\u00a0[3]: Copied! <pre>name = input(\"Please enter your name: \")\n\nwith open('guest.txt', 'w') as file:\n    file.write(name)\n\nprint(f\"{name}'s name has been written to guest.txt.\")\n</pre> name = input(\"Please enter your name: \")  with open('guest.txt', 'w') as file:     file.write(name)  print(f\"{name}'s name has been written to guest.txt.\") <pre>Andy's name has been written to guest.txt.\n</pre> In\u00a0[5]: Copied! <pre>with open(\"guest_book.txt\", \"a\") as file:\n    while True:\n        name = input(\"Please enter your name (or type 'quit' to exit): \")\n        if name == \"quit\":\n            break\n        print(f\"Hello, {name}! Welcome to our guest book.\")\n\n        file.write(name + \"\\n\")\n        print(\"Thank you for visiting! your visit has been recorded\")\n</pre> with open(\"guest_book.txt\", \"a\") as file:     while True:         name = input(\"Please enter your name (or type 'quit' to exit): \")         if name == \"quit\":             break         print(f\"Hello, {name}! Welcome to our guest book.\")          file.write(name + \"\\n\")         print(\"Thank you for visiting! your visit has been recorded\")   <pre>Hello, Andy! Welcome to our guest book.\nThank you for visiting! your visit has been recorded\nHello, Eric! Welcome to our guest book.\nThank you for visiting! your visit has been recorded\n</pre> In\u00a0[7]: Copied! <pre>with open(\"Programming Poll.txt\", \"a\") as file:\n    while True:\n        reasons = input(\"why do you like programming (or type 'quit' to exit): \")\n        if reasons == \"quit\":\n            break\n        file.write(reasons + \"\\n\")\n        print(\"your poll has been recorded, thank you! \")\n</pre> with open(\"Programming Poll.txt\", \"a\") as file:     while True:         reasons = input(\"why do you like programming (or type 'quit' to exit): \")         if reasons == \"quit\":             break         file.write(reasons + \"\\n\")         print(\"your poll has been recorded, thank you! \") <pre>your poll has been recorded, thank you! \n</pre> In\u00a0[10]: Copied! <pre>while True:\n    try:\n        number1 = input(\"First number\")\n        number2 = input(\"Second number\")\n\n        result = int(number1) + int(number2)\n        print(f\"the sum of {number1} and {number2} is {result}\")\n        break\n    except ValueError: \n        print(\"Invalid numbers, please try again with valid numbers\")\n</pre> while True:     try:         number1 = input(\"First number\")         number2 = input(\"Second number\")          result = int(number1) + int(number2)         print(f\"the sum of {number1} and {number2} is {result}\")         break     except ValueError:          print(\"Invalid numbers, please try again with valid numbers\") <pre>Invalid numbers, please try again with valid numbers\nthe sum of 1 and 2 is 3\n</pre> In\u00a0[16]: Copied! <pre>while True:\n    try:\n        number1 = input(\"Enter the first number (or 'quit' to exit): \")\n\n        if number1 == 'quit':\n            break  \n\n        number2 = input(\"Enter the second number: \")\n        result = int(number1) + int(number2)\n        print(f\"The sum of {number1} and {number2} is {result}\")\n\n    except ValueError:\n        \n        print(\"Invalid input. Please enter valid numbers.\")\n</pre> while True:     try:         number1 = input(\"Enter the first number (or 'quit' to exit): \")          if number1 == 'quit':             break            number2 = input(\"Enter the second number: \")         result = int(number1) + int(number2)         print(f\"The sum of {number1} and {number2} is {result}\")      except ValueError:                  print(\"Invalid input. Please enter valid numbers.\")  <pre>Invalid input. Please enter valid numbers.\nInvalid input. Please enter valid numbers.\nThe sum of 4 and 5 is 9\nThe sum of 6 and 7 is 13\n</pre> In\u00a0[30]: Copied! <pre>try:\n    with open(\"cats.txt\") as catfile:\n        print(\"the cats names are \")\n        print(catfile.read())\n\n    with open(\"dogs.txt\") as dogfile:\n        print(\"the dogs names are\")\n        print(dogfile.read())\n\nexcept FileNotFoundError:\n    print(\"\\nOne of the files is missing\")\n</pre>  try:     with open(\"cats.txt\") as catfile:         print(\"the cats names are \")         print(catfile.read())      with open(\"dogs.txt\") as dogfile:         print(\"the dogs names are\")         print(dogfile.read())  except FileNotFoundError:     print(\"\\nOne of the files is missing\")  <pre>the cats names are \nFinn\nhoagie\nmochi\n\nOne of the files is missing\n</pre> In\u00a0[33]: Copied! <pre>try:\n    with open(\"cats.txt\") as catfile:\n        print(\"the cats names are \")\n        print(catfile.read())\n\n    with open(\"dogs.txt\") as dogfile:\n        print(\"the dogs names are\")\n        print(dogfile.read())\n\nexcept FileNotFoundError:\n    pass\nelse:\n    print(\"\\nOne of the files is missing\")\n</pre> try:     with open(\"cats.txt\") as catfile:         print(\"the cats names are \")         print(catfile.read())      with open(\"dogs.txt\") as dogfile:         print(\"the dogs names are\")         print(dogfile.read())  except FileNotFoundError:     pass else:     print(\"\\nOne of the files is missing\")  <pre>the cats names are \nFinn\nhoagie\nmochi\n</pre> In\u00a0[34]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[34]: <pre>2</pre> In\u00a0[35]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[35]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[41]: Copied! <pre>filename = \"Thunder in space.txt\"\n</pre> filename = \"Thunder in space.txt\" In\u00a0[45]: Copied! <pre>def count_the(filename):\n    \"\"\"Count the approximate number of words in a file.\"\"\"\n    try:\n        with open(filename, encoding=\"utf-8\") as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        count = contents.lower().count('the')\n        print(f\"The file {filename} has {count} occurrences of the word 'the'.\")\n\ncount_the(filename)\n</pre> def count_the(filename):     \"\"\"Count the approximate number of words in a file.\"\"\"     try:         with open(filename, encoding=\"utf-8\") as f:             contents = f.read()     except FileNotFoundError:         pass     else:         count = contents.lower().count('the')         print(f\"The file {filename} has {count} occurrences of the word 'the'.\")  count_the(filename) <pre>The file Thunder in space.txt has 1489 occurrences of the word 'the'.\n</pre> In\u00a0[46]: Copied! <pre>def count_the(filename):\n    \"\"\"Count the approximate number of words in a file.\"\"\"\n    try:\n        with open(filename, encoding=\"utf-8\") as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        count = contents.lower().count(' the')\n        print(f\"The file {filename} has {count} occurrences of the word 'the'.\")\n\ncount_the(filename)\n</pre> def count_the(filename):     \"\"\"Count the approximate number of words in a file.\"\"\"     try:         with open(filename, encoding=\"utf-8\") as f:             contents = f.read()     except FileNotFoundError:         pass     else:         count = contents.lower().count(' the')         print(f\"The file {filename} has {count} occurrences of the word 'the'.\")  count_the(filename) <pre>The file Thunder in space.txt has 1229 occurrences of the word 'the'.\n</pre>"},{"location":"labs/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"labs/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"labs/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"labs/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"labs/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"labs/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"labs/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"labs/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"labs/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"labs/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"labs/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"labs/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"labs/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"labs/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"labs/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"labs/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"labs/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"labs/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"labs/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"labs/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"labs/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"labs/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"labs/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"labs/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"labs/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"labs/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"labs/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"labs/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"labs/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"labs/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"labs/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"labs/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"}]}